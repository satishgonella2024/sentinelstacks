{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SentinelStacks Documentation","text":""},{"location":"#ai-agent-management-system","title":"AI Agent Management System","text":"<p>SentinelStacks is a comprehensive system for creating, managing, and distributing AI agents using natural language. Built with inspiration from Docker's paradigm, SentinelStacks allows you to:</p> <ul> <li>Define agents using natural language in Sentinelfiles</li> <li>Build agent images that can be versioned and shared</li> <li>Run agents across different LLM backends (Claude, OpenAI, Llama, etc.)</li> <li>Manage agent state and orchestrate multi-agent systems</li> <li>Share agents through public and private registries</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<pre><code># Install SentinelStacks\ngo install github.com/sentinelstacks/sentinel@latest\n\n# Create your first agent\nsentinel init --name my-first-agent\n\n# Edit the Sentinelfile\nnano my-first-agent/Sentinelfile\n\n# Build your agent\nsentinel build -t my-username/my-first-agent:latest -f my-first-agent/Sentinelfile\n\n# Run your agent\nsentinel run my-username/my-first-agent:latest\n</code></pre>"},{"location":"#core-concepts","title":"Core Concepts","text":"Concept Description Sentinelfile NLP-based definition file for agents Sentinel Image Packaged agent definition with dependencies Sentinel Agent Running instance of an agent Sentinel Registry Repository for storing and sharing agent images Sentinel Runtime Execution environment for agents Sentinel Shim Abstraction layer for LLM providers"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Architecture Overview - Understand the system architecture</li> <li>User Guides - Learn how to use SentinelStacks</li> <li>Quick Start - Get up and running quickly</li> <li>LLM Providers - Configure different LLM backends</li> <li>Advanced Agents - Design sophisticated agent systems</li> <li>Development Roadmap - See what's planned for the future</li> </ul>"},{"location":"#example-agents","title":"Example Agents","text":"<p>SentinelStacks includes several example agents to help you get started:</p> <ul> <li>Basic Chatbot - A simple conversational agent</li> <li>Research Assistant - Advanced research and information synthesis</li> <li>Team Collaboration - Multi-agent system with specialized roles</li> <li>Financial Advisor - Financial planning with compliance controls</li> <li>NLP Generator - Create agents on-the-fly using natural language</li> </ul>"},{"location":"#supported-llm-providers","title":"Supported LLM Providers","text":"<p>SentinelStacks currently supports:</p> <ul> <li>Claude - Anthropic's Claude models (Claude 3 Opus, Sonnet, Haiku)</li> <li>Ollama - Self-hosted models via Ollama (Llama, Mistral, etc.)</li> <li>OpenAI - Support planned (Coming soon)</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>SentinelStacks is currently in active development. See our Progress Tracker for the current status and our Roadmap for planned features.</p>"},{"location":"#license","title":"License","text":"<p>MIT </p>"},{"location":"GITHUB_PAGES/","title":"Deploying to GitHub Pages","text":"<p>This document explains how to deploy the SentinelStacks documentation, including the API documentation, to GitHub Pages.</p>"},{"location":"GITHUB_PAGES/#automatic-deployment","title":"Automatic Deployment","text":"<p>The documentation is automatically deployed to GitHub Pages when changes are pushed to the <code>main</code> branch. The deployment is handled by a GitHub Actions workflow defined in <code>.github/workflows/deploy-docs.yml</code>.</p> <p>The workflow: 1. Builds the API documentation using the <code>scripts/generate_api_docs.sh</code> script 2. Builds the MkDocs site 3. Deploys the site to GitHub Pages</p>"},{"location":"GITHUB_PAGES/#manual-deployment","title":"Manual Deployment","text":"<p>If you need to deploy the documentation manually, follow these steps:</p> <ol> <li> <p>Generate the API documentation:    <pre><code>./scripts/generate_api_docs.sh\n</code></pre></p> </li> <li> <p>Build the MkDocs site:    <pre><code>mkdocs build\n</code></pre></p> </li> <li> <p>Deploy the site to GitHub Pages:    <pre><code>mkdocs gh-deploy --force\n</code></pre></p> </li> </ol>"},{"location":"GITHUB_PAGES/#structure-on-github-pages","title":"Structure on GitHub Pages","text":"<p>The documentation is deployed with the following structure:</p> <ul> <li><code>/</code>: The main documentation site</li> <li><code>/api/</code>: The API documentation page with Swagger UI</li> <li><code>/api-reference.yaml</code>: The OpenAPI specification</li> <li><code>/api-usage-guide/</code>: The API usage guide</li> </ul>"},{"location":"GITHUB_PAGES/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the deployment:</p> <ol> <li>Check that GitHub Pages is enabled for the repository and set to deploy from the <code>gh-pages</code> branch</li> <li>Verify that the GitHub Actions workflow has the necessary permissions</li> <li>Ensure that the API documentation is correctly generated</li> <li>Check the GitHub Actions logs for errors</li> <li>Test locally by running <code>mkdocs serve</code> before pushing changes</li> </ol>"},{"location":"GITHUB_PAGES/#customizing-the-deployment","title":"Customizing the Deployment","text":"<p>To customize the deployment:</p> <ol> <li>Edit the <code>.github/workflows/deploy-docs.yml</code> file to modify the GitHub Actions workflow</li> <li>Update the <code>mkdocs.yml</code> file to change the site configuration</li> <li>Modify the <code>scripts/sync_api_docs.sh</code> script to adjust how the API documentation is synced with MkDocs </li> </ol>"},{"location":"REGISTRY/","title":"SentinelStacks Registry","text":"<p>The SentinelStacks Registry is a centralized repository for sharing and discovering agents and stacks. This document explains how to use the registry features to collaborate with others.</p>"},{"location":"REGISTRY/#overview","title":"Overview","text":"<p>The registry system provides:</p> <ul> <li>Stack Sharing: Share your stack configurations with others</li> <li>Agent Distribution: Publish agents for others to use in their stacks</li> <li>Versioning: Maintain multiple versions of your stacks and agents</li> <li>Security: Sign and verify packages to ensure authenticity</li> <li>Discovery: Search and browse available stacks and agents</li> </ul>"},{"location":"REGISTRY/#file-formats","title":"File Formats","text":"<p>SentinelStacks uses standardized file formats with unique extensions:</p> <ul> <li>Agent Packages: <code>.agent.sntl</code> - Packaged agent ready for distribution</li> <li>Stack Packages: <code>.stack.sntl</code> - Packaged stack ready for distribution</li> <li>Agent Definitions: <code>.agent.yaml</code> - Agent definition file (similar to Dockerfile)</li> <li>Stack Definitions: <code>.stack.yaml</code> - Stack definition file (formerly Stackfile.yaml)</li> <li>Signatures: <code>.sig.sntl</code> - Detached signature for verification</li> </ul>"},{"location":"REGISTRY/#package-signing-and-verification","title":"Package Signing and Verification","text":"<p>All packages in the registry can be cryptographically signed to verify their authenticity and integrity.</p>"},{"location":"REGISTRY/#generating-signing-keys","title":"Generating Signing Keys","text":"<pre><code># Generate a new key pair\nsentinel key generate --id developer-key\n\n# List your keys\nsentinel key list\n</code></pre>"},{"location":"REGISTRY/#signing-packages","title":"Signing Packages","text":"<pre><code># Sign a package during push\nsentinel stack push my-stack.stack.yaml --sign --key developer-key\n\n# Create a detached signature\nsentinel sign my-stack.stack.sntl --key developer-key\n</code></pre>"},{"location":"REGISTRY/#verifying-packages","title":"Verifying Packages","text":"<pre><code># Verify a package during pull (default)\nsentinel stack pull my-stack:1.0.0 --verify\n\n# Verify a package explicitly\nsentinel verify my-stack-1.0.0.stack.sntl\n</code></pre>"},{"location":"REGISTRY/#using-the-registry","title":"Using the Registry","text":""},{"location":"REGISTRY/#authentication","title":"Authentication","text":"<pre><code># Log in to the registry\nsentinel login\n\n# Log out\nsentinel logout\n\n# View current authentication status\nsentinel whoami\n</code></pre>"},{"location":"REGISTRY/#pushing-stacks","title":"Pushing Stacks","text":"<pre><code># Push a stack to the registry\nsentinel stack push my-stack.stack.yaml\n\n# Push with a specific author\nsentinel stack push my-stack.stack.yaml --author \"Your Name &lt;email@example.com&gt;\"\n\n# Push and build a package file\nsentinel stack push my-stack.stack.yaml --build --output my-stack.stack.sntl\n</code></pre>"},{"location":"REGISTRY/#pulling-stacks","title":"Pulling Stacks","text":"<pre><code># Pull the latest version of a stack\nsentinel stack pull my-stack\n\n# Pull a specific version\nsentinel stack pull my-stack:1.2.3\n\n# Pull to a specific directory\nsentinel stack pull my-stack --output ./my-project\n\n# Pull with dependency resolution\nsentinel stack pull my-stack --extract-agents\n</code></pre>"},{"location":"REGISTRY/#searching-for-stacks","title":"Searching for Stacks","text":"<pre><code># Search for stacks\nsentinel stack search keywords\n\n# Limit results\nsentinel stack search keywords --limit 5\n\n# Format results\nsentinel stack search keywords --format wide\n</code></pre>"},{"location":"REGISTRY/#stack-dependencies","title":"Stack Dependencies","text":"<p>When you push a stack to the registry, the system automatically analyzes it for dependencies on specific agents. When others pull your stack, they can choose to automatically pull the required agents as well.</p> <pre><code># Check dependencies before pulling\nsentinel stack inspect-remote my-stack:1.0.0\n\n# Pull with dependencies\nsentinel stack pull my-stack:1.0.0 --extract-agents\n</code></pre>"},{"location":"REGISTRY/#private-registries","title":"Private Registries","text":"<p>You can configure SentinelStacks to use private registries for your organization:</p> <pre><code># Configure a private registry\nsentinel config set registry.url https://registry.your-company.com\n\n# Log in to the private registry\nsentinel login --registry https://registry.your-company.com\n</code></pre>"},{"location":"REGISTRY/#custom-metadata-and-labels","title":"Custom Metadata and Labels","text":"<p>You can add custom metadata and labels to your packages for better organization:</p> <pre><code># Add labels during push\nsentinel stack push my-stack.stack.yaml --label category=NLP --label team=DataScience\n\n# Search by label\nsentinel stack search --label team=DataScience\n</code></pre>"},{"location":"REGISTRY/#registry-api","title":"Registry API","text":"<p>The registry provides a REST API that can be used programmatically. Documentation for the API can be found at <code>https://registry.sentinelstacks.io/api/docs</code>.</p>"},{"location":"REGISTRY/#configuration","title":"Configuration","text":"<p>The registry client configuration is stored in your SentinelStacks config file:</p> <pre><code>registry:\n  url: https://registry.sentinelstacks.io\n  auth_token: your-auth-token\n  cache_dir: ~/.sentinel/cache\n\nsecurity:\n  keys_dir: ~/.sentinel/keys\n  default_key: developer-key\n</code></pre> <p>You can modify these settings using the <code>sentinel config</code> command.</p>"},{"location":"REGISTRY/#troubleshooting","title":"Troubleshooting","text":""},{"location":"REGISTRY/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Failures: Make sure you are logged in with <code>sentinel login</code></li> <li>Push Failures: Ensure your stack file is valid and all dependencies are available</li> <li>Signature Verification: Import the required public keys with <code>sentinel key import</code></li> </ol>"},{"location":"REGISTRY/#registry-status","title":"Registry Status","text":"<p>Check the registry status at <code>https://status.sentinelstacks.io</code> for any service disruptions.</p>"},{"location":"STACK-README/","title":"SentinelStacks - Stack Engine","text":"<p>SentinelStacks' Stack Engine enables you to define and execute multi-agent workflows where agents work together to accomplish complex tasks. This document provides guidance on using the stack functionality.</p>"},{"location":"STACK-README/#what-are-stacks","title":"What are Stacks?","text":"<p>Stacks are declarative definitions of multi-agent workflows. They define:</p> <ol> <li>Which agents to use</li> <li>How agents are connected (the data flow)</li> <li>Parameters for each agent</li> <li>Execution order dependencies</li> </ol>"},{"location":"STACK-README/#key-components","title":"Key Components","text":"<p>The Stack Engine consists of the following components:</p> <ul> <li>StackSpec - The core data structure defining a stack and its agents</li> <li>DAG Runner - Executes agents in topological order based on dependencies</li> <li>Stack State Manager - Manages execution state and data passing between agents</li> <li>Agent Runtime - Executes individual agents using the sentinel runtime</li> </ul>"},{"location":"STACK-README/#quick-start","title":"Quick Start","text":""},{"location":"STACK-README/#1-initialize-a-stack","title":"1. Initialize a Stack","text":"<p>Create a new stack using the <code>stack init</code> command:</p> <pre><code>sentinel stack init my-analysis-stack\n</code></pre> <p>This will create a Stackfile.yaml in the current directory. You can also create a stack from a template:</p> <pre><code>sentinel stack init my-analysis-stack --template=analyzer\n</code></pre> <p>Or using natural language:</p> <pre><code>sentinel stack init nlp-stack --nl=\"Create a pipeline with a text extractor, a sentiment analyzer, and a summarizer agent\"\n</code></pre>"},{"location":"STACK-README/#2-run-a-stack","title":"2. Run a Stack","text":"<p>Execute a stack using the <code>stack run</code> command:</p> <pre><code>sentinel stack run -f Stackfile.yaml\n</code></pre> <p>You can also provide additional input data:</p> <pre><code>sentinel stack run -f Stackfile.yaml --input='{\"text\": \"Sample text to analyze\"}'\n</code></pre>"},{"location":"STACK-README/#3-list-available-stacks","title":"3. List Available Stacks","text":"<p>List stacks in the current directory and the global stacks directory:</p> <pre><code>sentinel stack list --all\n</code></pre>"},{"location":"STACK-README/#4-inspect-a-stack","title":"4. Inspect a Stack","text":"<p>Examine the structure of a stack:</p> <pre><code>sentinel stack inspect Stackfile.yaml\n</code></pre> <p>Output the execution plan as a graph:</p> <pre><code>sentinel stack inspect Stackfile.yaml --format=dot &gt; stack.dot\n</code></pre>"},{"location":"STACK-README/#stack-file-format","title":"Stack File Format","text":"<p>A Stackfile.yaml follows this structure:</p> <pre><code>name: my-analysis-stack\ndescription: A stack for analyzing text data\nversion: 1.0.0\n\nagents:\n  - id: text-extractor\n    uses: text-extractor:latest\n    params:\n      format: \"json\"\n\n  - id: sentiment-analyzer\n    uses: sentiment-analyzer:latest\n    inputFrom:\n      - text-extractor\n    params:\n      model: \"default\"\n\n  - id: summarizer\n    uses: text-summarizer:latest\n    inputFrom:\n      - text-extractor\n      - sentiment-analyzer\n    params:\n      style: \"concise\"\n</code></pre>"},{"location":"STACK-README/#key-fields","title":"Key Fields","text":"<ul> <li>name: Unique identifier for the stack</li> <li>description: Human-readable description</li> <li>version: Semantic version of the stack</li> <li>agents: List of agent specifications</li> </ul> <p>For each agent: - id: Unique identifier for the agent within the stack - uses: Reference to the agent image (name:tag) - inputFrom: List of agent IDs to take input from - inputKey: (Optional) Specific key to extract from source agent's output - outputKey: (Optional) Key to store this agent's output under - params: Custom parameters to pass to the agent - depends: (Optional) Additional dependencies that don't involve data passing</p>"},{"location":"STACK-README/#examples","title":"Examples","text":"<p>See the <code>examples/stacks/</code> directory for sample stacks that demonstrate different patterns:</p> <ul> <li><code>simple_analysis.yaml</code> - Basic text analysis pipeline</li> <li><code>data_pipeline.yaml</code> - Complex data processing pipeline</li> <li><code>research_assistant.yaml</code> - Research and summarization workflow</li> <li><code>chat_enhancement.yaml</code> - Conversational enhancement stack</li> </ul>"},{"location":"STACK-README/#best-practices","title":"Best Practices","text":"<ol> <li>Atomicity: Design agents to do one thing well</li> <li>Clear Dependencies: Make data dependencies explicit</li> <li>Error Handling: Include validation agents for critical points</li> <li>Testing: Test stacks with representative data</li> <li>Versioning: Version your stacks and reference specific agent versions</li> </ol>"},{"location":"STACK-README/#advanced-features","title":"Advanced Features","text":""},{"location":"STACK-README/#context-propagation","title":"Context Propagation","text":"<p>Agents can access outputs from any of their dependencies using the <code>inputFrom</code> field. By default, all outputs from the dependency are provided, but you can use <code>inputKey</code> to select specific data.</p>"},{"location":"STACK-README/#execution-models","title":"Execution Models","text":"<p>The Stack Engine supports different execution models:</p> <ul> <li>Sequential: Agents run in topological order (default)</li> <li>Parallel: Independent agents run concurrently</li> <li>Conditional: Some agents may be skipped based on conditions</li> </ul>"},{"location":"STACK-README/#custom-runtime-configuration","title":"Custom Runtime Configuration","text":"<p>You can configure execution parameters using flags:</p> <pre><code>sentinel stack run -f Stackfile.yaml --timeout=30 --verbose\n</code></pre>"},{"location":"STACK-README/#troubleshooting","title":"Troubleshooting","text":""},{"location":"STACK-README/#common-issues","title":"Common Issues","text":"<ol> <li>Agent Not Found: Ensure the agent is available locally or in the registry</li> <li>Dependency Cycles: Check for circular dependencies between agents</li> <li>Execution Timeout: Increase the timeout for complex stacks</li> <li>Data Format Mismatch: Ensure agents can process the data format they receive</li> </ol>"},{"location":"STACK-README/#debugging","title":"Debugging","text":"<p>Use the <code>--verbose</code> flag to see detailed execution information:</p> <pre><code>sentinel stack run -f Stackfile.yaml --verbose\n</code></pre>"},{"location":"api-usage-guide/","title":"SentinelStacks API Usage Guide","text":"<p>This guide provides a practical overview of how to interact with the SentinelStacks API, with a focus on the memory management capabilities.</p>"},{"location":"api-usage-guide/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. To authenticate:</p> <pre><code>curl -X POST http://localhost:8080/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\": \"your_password\"}'\n</code></pre> <p>Store the returned JWT token for use in subsequent requests:</p> <pre><code>{\n  \"token\": \"eyJhbGciOiJ...\",\n  \"username\": \"your_username\",\n  \"expires\": \"2023-04-20T12:00:00Z\"\n}\n</code></pre>"},{"location":"api-usage-guide/#memory-management-api","title":"Memory Management API","text":"<p>SentinelStacks provides a memory system for agents to store and retrieve information across sessions. The API exposes endpoints for working with both key-value memory and vector embeddings.</p>"},{"location":"api-usage-guide/#storing-values-in-memory","title":"Storing Values in Memory","text":"<p>Store a key-value pair in an agent's memory:</p> <pre><code>curl -X POST http://localhost:8080/v1/memory/store \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"agent_id\": \"agent_abc123\",\n    \"key\": \"user_preference\",\n    \"value\": \"dark_mode\",\n    \"metadata\": {\n      \"source\": \"user_input\",\n      \"timestamp\": \"2023-04-01T12:00:00Z\"\n    }\n  }'\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"key\": \"user_preference\"\n}\n</code></pre>"},{"location":"api-usage-guide/#retrieving-values-from-memory","title":"Retrieving Values from Memory","text":"<p>Retrieve a value by key:</p> <pre><code>curl -X GET \"http://localhost:8080/v1/memory/retrieve?agent_id=agent_abc123&amp;key=user_preference\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre> <p>Response:</p> <pre><code>{\n  \"key\": \"user_preference\",\n  \"value\": \"dark_mode\",\n  \"metadata\": {\n    \"source\": \"user_input\",\n    \"timestamp\": \"2023-04-01T12:00:00Z\"\n  }\n}\n</code></pre>"},{"location":"api-usage-guide/#semantic-search-in-memory","title":"Semantic Search in Memory","text":"<p>Search for semantically similar entries in an agent's memory:</p> <pre><code>curl -X GET \"http://localhost:8080/v1/memory/search?agent_id=agent_abc123&amp;query=user%20settings&amp;limit=5&amp;threshold=0.7\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre> <p>Response:</p> <pre><code>{\n  \"results\": [\n    {\n      \"key\": \"user_preference\",\n      \"value\": \"dark_mode\",\n      \"score\": 0.92,\n      \"metadata\": {\n        \"source\": \"user_input\",\n        \"timestamp\": \"2023-04-01T12:00:00Z\"\n      }\n    },\n    {\n      \"key\": \"color_scheme\",\n      \"value\": \"blue\",\n      \"score\": 0.85,\n      \"metadata\": {\n        \"source\": \"api\",\n        \"timestamp\": \"2023-04-02T15:30:00Z\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"api-usage-guide/#deleting-memory-entries","title":"Deleting Memory Entries","text":"<p>Delete a specific memory entry by key:</p> <pre><code>curl -X DELETE \"http://localhost:8080/v1/memory/delete?agent_id=agent_abc123&amp;key=user_preference\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre> <p>Response:</p> <pre><code>{\n  \"success\": true,\n  \"key\": \"user_preference\"\n}\n</code></pre>"},{"location":"api-usage-guide/#using-memory-in-agent-configuration","title":"Using Memory in Agent Configuration","text":"<p>When creating a new agent, you can configure its memory settings:</p> <pre><code>curl -X POST http://localhost:8080/v1/agents \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"image\": \"username/research-agent:latest\",\n    \"parameters\": {\n      \"memory_retention\": \"30d\",\n      \"memory_type\": \"persistent\",\n      \"embedding_model\": \"text-embedding-ada-002\"\n    }\n  }'\n</code></pre>"},{"location":"api-usage-guide/#memory-types-and-persistence","title":"Memory Types and Persistence","text":"<p>SentinelStacks supports different types of memory stores with varying persistence characteristics:</p> <ol> <li>In-memory: Fast but volatile. Data is lost when the agent stops.</li> <li>File-backed: Persists data to disk. Suitable for most use cases.</li> <li>Database-backed: Uses SQLite for storage. Best for production use with large memory volumes.</li> </ol> <p>The memory type can be configured when creating an agent or in the <code>Sentinelfile</code> configuration.</p>"},{"location":"api-usage-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Use meaningful keys: Structure your memory keys hierarchically (e.g., <code>user/preferences/theme</code>) for easier organization.</li> <li>Include metadata: Add metadata like timestamps, sources, and tags to make memory entries more useful.</li> <li>Set appropriate retention: Use the <code>memory_retention</code> parameter to control how long memory entries are kept.</li> <li>Vector search optimization: For semantic search, provide clear, descriptive text that captures the essence of what you want to store and retrieve.</li> <li>Memory cleanup: Periodically delete obsolete entries to maintain performance and minimize storage usage.</li> </ol>"},{"location":"api-usage-guide/#error-handling","title":"Error Handling","text":"<p>The API returns standard HTTP status codes: - <code>200/201</code>: Success - <code>400</code>: Bad request (invalid parameters) - <code>401</code>: Unauthorized (authentication failed) - <code>404</code>: Resource not found - <code>500</code>: Server error</p> <p>Error responses include an <code>error</code> field with a description:</p> <pre><code>{\n  \"error\": \"Agent not found\"\n}\n</code></pre>"},{"location":"api-usage-guide/#rate-limiting","title":"Rate Limiting","text":"<p>The API enforces rate limits to protect system resources. If you exceed the limits, you'll receive a <code>429 Too Many Requests</code> response.</p> <p>For higher limits, contact the system administrator or consider running a self-hosted instance.</p>"},{"location":"api-usage-guide/#websocket-connections","title":"WebSocket Connections","text":"<p>For real-time interaction with agents, WebSocket connections are available:</p> <pre><code>// Chat with an agent\nconst chatSocket = new WebSocket('ws://localhost:8080/v1/agents/agent_abc123/chat');\n\n// Listen for agent events\nconst eventsSocket = new WebSocket('ws://localhost:8080/v1/agents/agent_abc123/events');\n</code></pre> <p>See the WebSocket API documentation for details on the message formats and event types. </p>"},{"location":"docker-commands/","title":"SentinelStacks Docker-Inspired Command Reference","text":"<p>SentinelStacks provides a Docker-inspired command interface for managing AI agents, networks, volumes, and multi-agent systems. This guide documents all the available commands and their usage.</p>"},{"location":"docker-commands/#setup","title":"Setup","text":"<p>Before using the commands, make sure you have properly installed SentinelStacks:</p> <pre><code># Build the Sentinel binary\ngo build -o sentinel main.go\n\n# Verify installation\n./sentinel version\n</code></pre>"},{"location":"docker-commands/#network-commands","title":"Network Commands","text":"<p>Networks enable communication between agents, allowing them to exchange information and collaborate.</p>"},{"location":"docker-commands/#creating-networks","title":"Creating Networks","text":"<pre><code># Create a simple network\n./sentinel network create my-network\n\n# Create a network with a specific driver\n./sentinel network create my-network --driver advanced\n</code></pre>"},{"location":"docker-commands/#listing-networks","title":"Listing Networks","text":"<pre><code># List all networks\n./sentinel network ls\n</code></pre>"},{"location":"docker-commands/#connecting-agents-to-networks","title":"Connecting Agents to Networks","text":"<pre><code># Connect an agent to a network\n./sentinel network connect my-network agent-id\n</code></pre>"},{"location":"docker-commands/#disconnecting-agents-from-networks","title":"Disconnecting Agents from Networks","text":"<pre><code># Disconnect an agent from a network\n./sentinel network disconnect my-network agent-id\n</code></pre>"},{"location":"docker-commands/#inspecting-networks","title":"Inspecting Networks","text":"<pre><code># View detailed information about a network\n./sentinel network inspect my-network\n</code></pre>"},{"location":"docker-commands/#removing-networks","title":"Removing Networks","text":"<pre><code># Remove a network\n./sentinel network rm my-network\n\n# Force remove a network even if it has connected agents\n./sentinel network rm my-network --force\n</code></pre>"},{"location":"docker-commands/#volume-commands","title":"Volume Commands","text":"<p>Volumes provide persistent memory for agents, allowing them to store and retrieve information across sessions.</p>"},{"location":"docker-commands/#creating-volumes","title":"Creating Volumes","text":"<pre><code># Create a simple volume\n./sentinel volume create my-volume\n\n# Create a volume with a specific size\n./sentinel volume create my-volume --size 2GB\n\n# Create an encrypted volume\n./sentinel volume create secure-volume --size 1GB --encrypted\n</code></pre>"},{"location":"docker-commands/#listing-volumes","title":"Listing Volumes","text":"<pre><code># List all volumes\n./sentinel volume ls\n</code></pre>"},{"location":"docker-commands/#mounting-volumes","title":"Mounting Volumes","text":"<pre><code># Mount a volume to an agent\n./sentinel volume mount my-volume agent-id\n\n# Mount a volume with a specific path\n./sentinel volume mount my-volume agent-id --path /custom/path\n</code></pre>"},{"location":"docker-commands/#unmounting-volumes","title":"Unmounting Volumes","text":"<pre><code># Unmount a volume from an agent\n./sentinel volume unmount my-volume agent-id\n</code></pre>"},{"location":"docker-commands/#inspecting-volumes","title":"Inspecting Volumes","text":"<pre><code># View detailed information about a volume\n./sentinel volume inspect my-volume\n</code></pre>"},{"location":"docker-commands/#removing-volumes","title":"Removing Volumes","text":"<pre><code># Remove a volume\n./sentinel volume rm my-volume\n\n# Force remove a volume even if it is mounted\n./sentinel volume rm my-volume --force\n</code></pre>"},{"location":"docker-commands/#compose-commands","title":"Compose Commands","text":"<p>Compose commands enable managing multi-agent systems defined in YAML configuration files.</p>"},{"location":"docker-commands/#creating-multi-agent-systems","title":"Creating Multi-Agent Systems","text":"<pre><code># Create and start a multi-agent system defined in a YAML file\n./sentinel compose up -f my-compose.yaml\n\n# Create in detached mode\n./sentinel compose up -f my-compose.yaml -d\n</code></pre>"},{"location":"docker-commands/#listing-multi-agent-systems","title":"Listing Multi-Agent Systems","text":"<pre><code># List all running multi-agent systems\n./sentinel compose ls\n</code></pre>"},{"location":"docker-commands/#pausing-multi-agent-systems","title":"Pausing Multi-Agent Systems","text":"<pre><code># Pause all agents in a multi-agent system\n./sentinel compose pause system-id\n</code></pre>"},{"location":"docker-commands/#resuming-multi-agent-systems","title":"Resuming Multi-Agent Systems","text":"<pre><code># Resume all agents in a multi-agent system\n./sentinel compose resume system-id\n</code></pre>"},{"location":"docker-commands/#viewing-logs","title":"Viewing Logs","text":"<pre><code># View logs from all agents in a multi-agent system\n./sentinel compose logs system-id\n\n# Follow log output\n./sentinel compose logs system-id -f\n\n# Show only the last N lines\n./sentinel compose logs system-id --tail 100\n</code></pre>"},{"location":"docker-commands/#stopping-and-removing-multi-agent-systems","title":"Stopping and Removing Multi-Agent Systems","text":"<pre><code># Stop and remove a multi-agent system\n./sentinel compose down system-id\n\n# Remove volumes as well\n./sentinel compose down system-id --volumes\n</code></pre>"},{"location":"docker-commands/#system-commands","title":"System Commands","text":"<p>System commands provide monitoring and maintenance capabilities for your SentinelStacks installation.</p>"},{"location":"docker-commands/#system-information","title":"System Information","text":"<pre><code># Display system information\n./sentinel system info\n</code></pre>"},{"location":"docker-commands/#disk-usage","title":"Disk Usage","text":"<pre><code># Show disk usage by different components\n./sentinel system df\n</code></pre>"},{"location":"docker-commands/#removing-unused-data","title":"Removing Unused Data","text":"<pre><code># Remove unused data\n./sentinel system prune\n\n# Remove all unused data, including volumes\n./sentinel system prune --all --volumes\n</code></pre>"},{"location":"docker-commands/#system-events","title":"System Events","text":"<pre><code># View system events\n./sentinel system events\n\n# Filter events by type\n./sentinel system events --filter volume\n\n# Show events from the last hour\n./sentinel system events --since 1h\n\n# Show verbose event details\n./sentinel system events -v\n</code></pre>"},{"location":"docker-commands/#agent-interaction-commands","title":"Agent Interaction Commands","text":"<p>SentinelStacks also provides commands for interacting directly with agents.</p>"},{"location":"docker-commands/#executing-commands","title":"Executing Commands","text":"<pre><code># Execute a one-time command without creating an agent\n./sentinel exec \"What is the capital of France?\"\n</code></pre>"},{"location":"docker-commands/#interactive-shell","title":"Interactive Shell","text":"<pre><code># Start an interactive shell with a running agent\n./sentinel shell agent-id\n</code></pre>"},{"location":"docker-commands/#registry-commands","title":"Registry Commands","text":"<p>Registry commands allow managing agent images in remote registries.</p>"},{"location":"docker-commands/#pulling-images","title":"Pulling Images","text":"<pre><code># Pull an agent image from a registry\n./sentinel pull registry.example.com/research-assistant:latest\n</code></pre>"},{"location":"docker-commands/#pushing-images","title":"Pushing Images","text":"<pre><code># Push an agent image to a registry\n./sentinel push research-assistant:latest registry.example.com/research-assistant:latest\n</code></pre>"},{"location":"docker-commands/#searching-images","title":"Searching Images","text":"<pre><code># Search for agent images in a registry\n./sentinel search \"research assistant\"\n</code></pre>"},{"location":"docker-commands/#authentication","title":"Authentication","text":"<pre><code># Log in to a registry\n./sentinel login registry.example.com\n\n# Log out from a registry\n./sentinel logout registry.example.com\n</code></pre>"},{"location":"docker-commands/#compose-file-format","title":"Compose File Format","text":"<p>Multi-agent systems are defined using YAML files similar to Docker Compose. Here's an example:</p> <pre><code>name: research-team\n\nnetworks:\n  brain-net:\n    driver: default\n  data-net:\n    driver: default\n\nvolumes:\n  research-memory:\n    size: 2GB\n  output-memory:\n    size: 1GB\n    encrypted: true\n\nagents:\n  coordinator:\n    image: sentinelstacks/agent:coordinator\n    networks:\n      - brain-net\n      - data-net\n    volumes:\n      - research-memory:/memory\n    environment:\n      ROLE: coordinator\n      TASK: research_coordination\n    resources:\n      memory: 1GB\n\n  researcher:\n    image: sentinelstacks/agent:researcher\n    networks:\n      - brain-net\n    volumes:\n      - research-memory:/memory/read-only\n    environment:\n      ROLE: researcher\n      TOPIC: ai_safety\n    resources:\n      memory: 2GB\n\n  writer:\n    image: sentinelstacks/agent:writer\n    networks:\n      - brain-net\n      - data-net\n    volumes:\n      - output-memory:/memory\n    environment:\n      ROLE: writer\n      FORMAT: academic_paper\n    resources:\n      memory: 1GB\n</code></pre> <p>This configuration defines a multi-agent system with three agents (coordinator, researcher, and writer) connected via networks and sharing volumes.</p>"},{"location":"docker-commands/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the SentinelStacks commands, try the following:</p> <ol> <li> <p>Check the system information:    <pre><code>./sentinel system info\n</code></pre></p> </li> <li> <p>View recent system events:    <pre><code>./sentinel system events --since 15m\n</code></pre></p> </li> <li> <p>Check if there are any network or volume conflicts:    <pre><code>./sentinel network ls\n./sentinel volume ls\n</code></pre></p> </li> <li> <p>Make sure you have sufficient disk space:    <pre><code>./sentinel system df\n</code></pre></p> </li> </ol>"},{"location":"docker-commands/#configuration","title":"Configuration","text":"<p>SentinelStacks configuration is stored in <code>~/.sentinel/config.yaml</code>. You can modify this file to customize the behavior of the system.</p>"},{"location":"docker-commands/#where-to-go-next","title":"Where to Go Next","text":"<p>For more information on SentinelStacks:</p> <ul> <li>Main Documentation</li> <li>Agent Development Guide</li> <li>API Reference</li> <li>Advanced Configuration</li> </ul>"},{"location":"api/","title":"API Documentation","text":"<p>This page provides interactive documentation for the SentinelStacks API.</p>"},{"location":"api/#interactive-api-explorer","title":"Interactive API Explorer","text":""},{"location":"api/#api-reference","title":"API Reference","text":"<p>The full OpenAPI specification is available here.</p>"},{"location":"api/#memory-management-api","title":"Memory Management API","text":"<p>SentinelStacks provides a comprehensive memory API for storing, retrieving, and searching data:</p> <ul> <li>Store Memory: Store key-value pairs in agent memory</li> <li>Retrieve Memory: Retrieve values by key</li> <li>Search Memory: Perform semantic search across stored data</li> <li>Delete Memory: Remove stored data by key</li> </ul> <p>For more details, see the API Usage Guide. </p>"},{"location":"architecture/","title":"SentinelStacks Architecture","text":""},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>SentinelStacks is built as a modular system with clear separation of concerns, directly inspired by Docker's architecture. This design enables flexibility, extensibility, and a familiar experience for users already acquainted with container technologies.</p> <p></p>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-cli-tool-sentinel","title":"1. CLI Tool (sentinel)","text":"<p>The command-line interface serves as the primary interaction point for most users. It provides commands to:</p> <ul> <li>Initialize new agent definitions (<code>sentinel init</code>)</li> <li>Build agent images from Sentinelfiles (<code>sentinel build</code>)</li> <li>Run agents (<code>sentinel run</code>)</li> <li>Manage the agent lifecycle (<code>sentinel stop</code>, <code>sentinel restart</code>)</li> <li>Push/pull agents to/from registries (<code>sentinel push</code>, <code>sentinel pull</code>)</li> </ul>"},{"location":"architecture/#2-sentinel-desktop","title":"2. Sentinel Desktop","text":"<p>The graphical interface provides visualization and management capabilities:</p> <ul> <li>Visual agent builder with NLP input</li> <li>Agent monitoring and logs</li> <li>Registry browsing and management</li> <li>Performance metrics and analytics</li> </ul>"},{"location":"architecture/#3-parser-service","title":"3. Parser Service","text":"<p>Translates natural language Sentinelfiles into structured agent definitions: - Leverages LLMs to understand intent and requirements - Validates parsed definitions against original specifications - Handles versioning and compatibility</p>"},{"location":"architecture/#4-runtime-environment","title":"4. Runtime Environment","text":"<p>Executes agents with the specified capabilities: - Manages agent lifecycle (initialization, execution, termination) - Handles state persistence - Provides tool access and permission management - Orchestrates multi-agent interactions</p>"},{"location":"architecture/#5-sentinel-shim","title":"5. Sentinel Shim","text":"<p>Abstracts LLM provider differences: - Normalizes inputs/outputs across different models - Handles provider-specific optimizations - Manages context windows and token limits - Provides fallback mechanisms</p>"},{"location":"architecture/#6-registry-service","title":"6. Registry Service","text":"<p>Stores and distributes agent definitions: - Versioning and tagging support - Access control and authentication - Search and discovery functions - Metadata and documentation storage</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>User creates a Sentinelfile in natural language</li> <li>Parser converts the NLP into a structured agent definition</li> <li>Builder packages the definition into a Sentinel Image</li> <li>Runtime loads the image and initializes an agent</li> <li>Shim handles communication with the appropriate LLM provider</li> <li>State Manager maintains agent state across executions</li> </ol>"},{"location":"architecture/#security-model","title":"Security Model","text":"<ul> <li>Role-based access control for registries</li> <li>Isolated execution environments for agents</li> <li>Capability-based permission model for tools</li> <li>Audit logging for all operations</li> <li>Encrypted communication between components</li> </ul>"},{"location":"architecture/#scalability-approach","title":"Scalability Approach","text":"<ul> <li>Stateless components for horizontal scaling</li> <li>Distributed state management</li> <li>Eventual consistency for registry operations</li> <li>Caching at multiple levels</li> </ul>"},{"location":"architecture/api-documentation/","title":"API Documentation with OpenAPI","text":"<p>This guide explains how to document, view, and use the SentinelStacks API using OpenAPI specification.</p>"},{"location":"architecture/api-documentation/#overview","title":"Overview","text":"<p>SentinelStacks uses OpenAPI 3.0 (formerly known as Swagger) to document its REST API interfaces. This provides:</p> <ol> <li>Interactive API Documentation: Try out API calls directly from the browser</li> <li>Precise Schema Definitions: Clear understanding of request/response formats</li> <li>Code Generation: Generate client SDKs for multiple languages</li> <li>Automated Testing: Validate API behavior against documentation</li> </ol>"},{"location":"architecture/api-documentation/#api-documentation-interfaces","title":"API Documentation Interfaces","text":"<p>SentinelStacks provides three ways to interact with the API documentation:</p>"},{"location":"architecture/api-documentation/#1-swagger-ui","title":"1. Swagger UI","text":"<p>Swagger UI offers an interactive way to explore and test the API.</p> <ul> <li>URL: <code>http://localhost:8081/swagger/</code> (when running the API server)</li> <li>Usage: Click on endpoints to expand them, fill in parameters, and execute requests</li> </ul>"},{"location":"architecture/api-documentation/#2-redoc","title":"2. ReDoc","text":"<p>ReDoc provides a more modern, responsive documentation view that's easier to read.</p> <ul> <li>URL: <code>http://localhost:8081/redoc/</code> (when running the API server)</li> <li>Usage: Browse the documentation with enhanced readability and search</li> </ul>"},{"location":"architecture/api-documentation/#3-raw-openapi-json","title":"3. Raw OpenAPI JSON","text":"<p>Access the raw OpenAPI specification:</p> <ul> <li>URL: <code>http://localhost:8081/swagger/doc.json</code></li> <li>Usage: Import into API design tools or client generators</li> </ul>"},{"location":"architecture/api-documentation/#starting-the-api-server","title":"Starting the API Server","text":"<p>To run the API server with documentation:</p> <pre><code>sentinel api\n</code></pre> <p>This starts: - The main API server on port 8080 - The documentation server on port 8081</p>"},{"location":"architecture/api-documentation/#api-server-options","title":"API Server Options","text":"<pre><code># Run API server with custom port\nsentinel api --port 9000\n\n# Enable detailed request logging\nsentinel api --log-requests\n\n# Run API server on a specific network interface\nsentinel api --host 0.0.0.0\n\n# Run API server with TLS/HTTPS\nsentinel api --tls-cert /path/to/cert.pem --tls-key /path/to/key.pem\n</code></pre>"},{"location":"architecture/api-documentation/#authenticating-with-the-api","title":"Authenticating with the API","text":"<p>The API requires authentication for most endpoints:</p> <ol> <li> <p>Get a token:    <pre><code>curl -X POST http://localhost:8080/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"user\", \"password\": \"password\"}'\n</code></pre></p> </li> <li> <p>Use the token in requests:    <pre><code>curl http://localhost:8080/v1/agents \\\n  -H \"Authorization: Bearer your-token-here\"\n</code></pre></p> </li> </ol> <p>In the Swagger UI, you can click the \"Authorize\" button to enter your token.</p>"},{"location":"architecture/api-documentation/#core-api-endpoints","title":"Core API Endpoints","text":"<p>The SentinelStacks API is organized into logical groups:</p> <ol> <li>Agents: Create, manage, and interact with agents</li> <li>Images: Work with agent images</li> <li>Stacks: Manage multi-agent systems</li> <li>Registry: Search, pull, and push agent packages</li> <li>Memory: Access agent memory and vector storage</li> </ol>"},{"location":"architecture/api-documentation/#for-developers-documenting-api-endpoints","title":"For Developers: Documenting API Endpoints","text":"<p>When adding new API endpoints, use the Swaggo annotations in your handler functions:</p> <pre><code>// @Summary Create a new agent\n// @Description Create a new agent from an image\n// @Tags agents\n// @Accept json\n// @Produce json\n// @Param agent body AgentRequest true \"Agent Request\"\n// @Success 201 {object} AgentResponse\n// @Failure 400 {object} ErrorResponse\n// @Failure 500 {object} ErrorResponse\n// @Router /agents [post]\nfunc (s *Server) createAgentHandler(w http.ResponseWriter, r *http.Request) {\n    // Implementation...\n}\n</code></pre> <p>After adding annotations, generate the OpenAPI spec:</p> <pre><code>go install github.com/swaggo/swag/cmd/swag@latest\nswag init -g internal/api/server.go -o docs/swagger\n</code></pre>"},{"location":"architecture/api-documentation/#client-libraries","title":"Client Libraries","text":"<p>The OpenAPI specification can be used to generate client libraries in various languages:</p> <pre><code># Generate TypeScript client\nnpx @openapitools/openapi-generator-cli generate \\\n  -i http://localhost:8081/swagger/doc.json \\\n  -g typescript-fetch \\\n  -o client/typescript\n\n# Generate Python client\nnpx @openapitools/openapi-generator-cli generate \\\n  -i http://localhost:8081/swagger/doc.json \\\n  -g python \\\n  -o client/python\n</code></pre>"},{"location":"architecture/api-documentation/#api-versioning","title":"API Versioning","text":"<p>The API is versioned with the <code>/v1</code> prefix. Future versions will use <code>/v2</code>, <code>/v3</code>, etc. </p>"},{"location":"architecture/api/","title":"SentinelStacks API Reference","text":"<p>This document provides a reference for the SentinelStacks API, allowing developers to integrate with and extend the SentinelStacks ecosystem programmatically.</p>"},{"location":"architecture/api/#api-basics","title":"API Basics","text":"<ul> <li>Base URL: <code>https://api.sentinelstacks.com/v1</code></li> <li>Authentication: Bearer token in the Authorization header</li> <li>Content Type: <code>application/json</code></li> <li>Rate Limiting: 100 requests per minute per authenticated user</li> </ul>"},{"location":"architecture/api/#authentication","title":"Authentication","text":"<p>To authenticate with the API, obtain an access token:</p> <pre><code># Using the CLI\nsentinel login\n\n# The token is stored in ~/.sentinel/config.json\n</code></pre> <p>For API requests, include the token in the Authorization header:</p> <pre><code>Authorization: Bearer your-access-token\n</code></pre>"},{"location":"architecture/api/#core-api-endpoints","title":"Core API Endpoints","text":""},{"location":"architecture/api/#agent-management","title":"Agent Management","text":""},{"location":"architecture/api/#list-images","title":"List Images","text":"<pre><code>GET /images\n</code></pre> <p>Response:</p> <pre><code>{\n  \"images\": [\n    {\n      \"id\": \"sha256:a1b2c3...\",\n      \"name\": \"username/agent-name\",\n      \"tag\": \"latest\",\n      \"created_at\": \"2025-03-30T12:00:00Z\",\n      \"size\": 1024,\n      \"llm\": \"claude-3.7-sonnet\"\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"architecture/api/#get-image-details","title":"Get Image Details","text":"<pre><code>GET /images/{image_id}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"sha256:a1b2c3...\",\n  \"name\": \"username/agent-name\",\n  \"tag\": \"latest\",\n  \"created_at\": \"2025-03-30T12:00:00Z\",\n  \"size\": 1024,\n  \"llm\": \"claude-3.7-sonnet\",\n  \"capabilities\": [\"web_search\", \"document_analysis\"],\n  \"parameters\": {\n    \"memory_retention\": \"7d\",\n    \"search_depth\": 10\n  },\n  \"metadata\": {\n    \"description\": \"An agent that helps with research tasks\",\n    \"author\": \"username\",\n    \"version\": \"1.0.0\"\n  }\n}\n</code></pre>"},{"location":"architecture/api/#list-running-agents","title":"List Running Agents","text":"<pre><code>GET /agents\n</code></pre> <p>Response:</p> <pre><code>{\n  \"agents\": [\n    {\n      \"id\": \"agent_abc123\",\n      \"image\": \"username/agent-name:latest\",\n      \"status\": \"running\",\n      \"created_at\": \"2025-03-30T14:00:00Z\",\n      \"memory_usage\": 128,\n      \"api_calls\": 42\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"architecture/api/#start-agent","title":"Start Agent","text":"<pre><code>POST /agents\n</code></pre> <p>Request:</p> <pre><code>{\n  \"image\": \"username/agent-name:latest\",\n  \"parameters\": {\n    \"memory_retention\": \"30d\",\n    \"search_depth\": 15\n  },\n  \"environment\": {\n    \"API_KEY\": \"your-service-api-key\"\n  }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"agent_def456\",\n  \"image\": \"username/agent-name:latest\",\n  \"status\": \"starting\",\n  \"created_at\": \"2025-03-31T09:00:00Z\",\n  \"endpoints\": {\n    \"chat\": \"wss://api.sentinelstacks.com/v1/agents/agent_def456/chat\",\n    \"events\": \"wss://api.sentinelstacks.com/v1/agents/agent_def456/events\"\n  }\n}\n</code></pre>"},{"location":"architecture/api/#stop-agent","title":"Stop Agent","text":"<pre><code>DELETE /agents/{agent_id}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"agent_def456\",\n  \"status\": \"stopping\"\n}\n</code></pre>"},{"location":"architecture/api/#get-agent-logs","title":"Get Agent Logs","text":"<pre><code>GET /agents/{agent_id}/logs\n</code></pre> <p>Parameters: - <code>limit</code> (optional): Number of log entries to return (default: 100) - <code>since</code> (optional): Return logs since timestamp</p> <p>Response:</p> <pre><code>{\n  \"logs\": [\n    {\n      \"timestamp\": \"2025-03-31T09:01:00Z\",\n      \"level\": \"info\",\n      \"message\": \"Agent initialized successfully\"\n    },\n    {\n      \"timestamp\": \"2025-03-31T09:01:05Z\",\n      \"level\": \"debug\",\n      \"message\": \"Connecting to LLM provider\"\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"architecture/api/#registry-operations","title":"Registry Operations","text":""},{"location":"architecture/api/#search-registry","title":"Search Registry","text":"<pre><code>GET /registry/search\n</code></pre> <p>Parameters: - <code>q</code> (required): Search query - <code>limit</code> (optional): Number of results to return (default: 20) - <code>page</code> (optional): Page number for pagination (default: 1) - <code>category</code> (optional): Filter by category - <code>capabilities</code> (optional): Filter by capabilities (comma-separated)</p> <p>Response:</p> <pre><code>{\n  \"results\": [\n    {\n      \"name\": \"username/agent-name\",\n      \"description\": \"An agent that helps with research tasks\",\n      \"stars\": 42,\n      \"downloads\": 1024,\n      \"created_at\": \"2025-02-15T10:00:00Z\",\n      \"tags\": [\"research\", \"productivity\"],\n      \"verified\": true\n    },\n    ...\n  ],\n  \"total\": 156,\n  \"page\": 1,\n  \"limit\": 20\n}\n</code></pre>"},{"location":"architecture/api/#push-image","title":"Push Image","text":"<pre><code>POST /registry/push\n</code></pre> <p>Request:</p> <pre><code>{\n  \"image_id\": \"sha256:a1b2c3...\",\n  \"name\": \"username/agent-name\",\n  \"tag\": \"latest\",\n  \"description\": \"An agent that helps with research tasks\",\n  \"tags\": [\"research\", \"productivity\"],\n  \"public\": true\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"upload_url\": \"https://storage.sentinelstacks.com/upload/token123\",\n  \"token\": \"upload_token_xyz\",\n  \"expires_at\": \"2025-03-31T10:00:00Z\"\n}\n</code></pre>"},{"location":"architecture/api/#pull-image","title":"Pull Image","text":"<pre><code>POST /registry/pull\n</code></pre> <p>Request:</p> <pre><code>{\n  \"name\": \"username/agent-name\",\n  \"tag\": \"latest\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"download_url\": \"https://storage.sentinelstacks.com/download/token456\",\n  \"token\": \"download_token_abc\",\n  \"expires_at\": \"2025-03-31T10:00:00Z\",\n  \"image\": {\n    \"id\": \"sha256:d4e5f6...\",\n    \"size\": 1024,\n    \"checksum\": \"sha256:abcdef123456...\"\n  }\n}\n</code></pre>"},{"location":"architecture/api/#chat-interaction","title":"Chat Interaction","text":""},{"location":"architecture/api/#connect-to-agent-chat","title":"Connect to Agent Chat","text":"<p>Establish a WebSocket connection:</p> <pre><code>WebSocket: wss://api.sentinelstacks.com/v1/agents/{agent_id}/chat\n</code></pre> <p>Send messages:</p> <pre><code>{\n  \"type\": \"message\",\n  \"content\": \"Hello, I need help with my research on climate change.\",\n  \"message_id\": \"msg_123\"\n}\n</code></pre> <p>Receive responses:</p> <pre><code>{\n  \"type\": \"response\",\n  \"content\": \"I'd be happy to help with your climate change research. What specific aspects are you interested in?\",\n  \"message_id\": \"msg_123\",\n  \"response_id\": \"resp_456\",\n  \"tools_used\": []\n}\n</code></pre>"},{"location":"architecture/api/#tool-usage","title":"Tool Usage","text":"<p>When the agent uses tools:</p> <pre><code>{\n  \"type\": \"tool_request\",\n  \"tool\": \"web_search\",\n  \"parameters\": {\n    \"query\": \"latest climate change research 2025\",\n    \"limit\": 5\n  },\n  \"request_id\": \"tool_req_789\"\n}\n</code></pre> <p>Tool response (from client to server):</p> <pre><code>{\n  \"type\": \"tool_response\",\n  \"request_id\": \"tool_req_789\",\n  \"status\": \"success\",\n  \"data\": {\n    \"results\": [\n      {\n        \"title\": \"Climate Change Report 2025\",\n        \"url\": \"https://example.com/climate-report-2025\",\n        \"snippet\": \"The latest findings suggest...\"\n      },\n      ...\n    ]\n  }\n}\n</code></pre>"},{"location":"architecture/api/#webhook-events","title":"Webhook Events","text":""},{"location":"architecture/api/#configure-webhooks","title":"Configure Webhooks","text":"<pre><code>POST /webhooks\n</code></pre> <p>Request:</p> <pre><code>{\n  \"url\": \"https://your-server.com/webhook\",\n  \"events\": [\"agent.started\", \"agent.stopped\", \"agent.error\"],\n  \"secret\": \"your_webhook_secret\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n  \"id\": \"webhook_123\",\n  \"url\": \"https://your-server.com/webhook\",\n  \"events\": [\"agent.started\", \"agent.stopped\", \"agent.error\"],\n  \"created_at\": \"2025-03-31T12:00:00Z\"\n}\n</code></pre>"},{"location":"architecture/api/#webhook-payload-example","title":"Webhook Payload Example","text":"<pre><code>{\n  \"event\": \"agent.started\",\n  \"timestamp\": \"2025-03-31T14:00:00Z\",\n  \"data\": {\n    \"agent_id\": \"agent_ghi789\",\n    \"image\": \"username/agent-name:latest\",\n    \"status\": \"running\"\n  },\n  \"signature\": \"sha256:123abc...\"\n}\n</code></pre>"},{"location":"architecture/api/#error-handling","title":"Error Handling","text":"<p>All API errors follow this format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"not_found\",\n    \"message\": \"Agent not found\",\n    \"details\": {\n      \"agent_id\": \"agent_xyz789\"\n    }\n  },\n  \"request_id\": \"req_456abc\"\n}\n</code></pre> <p>Common error codes: - <code>unauthorized</code>: Authentication required or failed - <code>forbidden</code>: Insufficient permissions - <code>not_found</code>: Resource not found - <code>bad_request</code>: Invalid parameters - <code>rate_limited</code>: Too many requests - <code>internal_error</code>: Server error</p>"},{"location":"architecture/api/#sdk-examples","title":"SDK Examples","text":""},{"location":"architecture/api/#go-sdk","title":"Go SDK","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/sentinelstacks/sdk-go/client\"\n)\n\nfunc main() {\n    // Create client\n    client := client.NewClient(\"your-access-token\")\n\n    // Start an agent\n    agent, err := client.StartAgent(context.Background(), &amp;client.StartAgentRequest{\n        Image: \"username/research-assistant:latest\",\n        Parameters: map[string]interface{}{\n            \"memory_retention\": \"14d\",\n        },\n    })\n    if err != nil {\n        log.Fatalf(\"Failed to start agent: %v\", err)\n    }\n\n    fmt.Printf(\"Agent started with ID: %s\\n\", agent.ID)\n    fmt.Printf(\"Chat at: %s\\n\", agent.Endpoints.Chat)\n}\n</code></pre>"},{"location":"architecture/api/#python-sdk","title":"Python SDK","text":"<pre><code>from sentinelstacks import Client\n\n# Create client\nclient = Client(token=\"your-access-token\")\n\n# Start an agent\nagent = client.start_agent(\n    image=\"username/research-assistant:latest\",\n    parameters={\n        \"memory_retention\": \"14d\"\n    }\n)\n\nprint(f\"Agent started with ID: {agent.id}\")\nprint(f\"Chat at: {agent.endpoints.chat}\")\n</code></pre>"},{"location":"architecture/api/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Headers include rate limit information:</li> <li><code>X-RateLimit-Limit</code>: Requests allowed per minute</li> <li><code>X-RateLimit-Remaining</code>: Requests remaining in the current window</li> <li> <p><code>X-RateLimit-Reset</code>: Time when the rate limit resets (Unix timestamp)</p> </li> <li> <p>When rate limited, the API returns a 429:</p> </li> </ul> <pre><code>{\n  \"error\": {\n    \"code\": \"rate_limited\",\n    \"message\": \"Rate limit exceeded\",\n    \"details\": {\n      \"limit\": 100,\n      \"reset_at\": 1717144800\n    }\n  },\n  \"request_id\": \"req_789def\"\n}\n</code></pre>"},{"location":"architecture/sentinelfile_spec/","title":"Sentinelfile Specification","text":""},{"location":"architecture/sentinelfile_spec/#overview","title":"Overview","text":"<p>A Sentinelfile is a natural language definition file that describes an AI agent's capabilities, behavior, and requirements. Unlike traditional configuration files that use structured formats like YAML or JSON, Sentinelfiles use plain language that is parsed by an LLM to extract structured information.</p>"},{"location":"architecture/sentinelfile_spec/#file-format","title":"File Format","text":"<p>A Sentinelfile is a plain text file named <code>Sentinelfile</code> (no extension). While the format is flexible, the following structure is recommended for clarity:</p> <pre><code># Sentinelfile for [Agent Name]\n\n[High-level description of the agent's purpose]\n\nThe agent should have access to [resources/knowledge/tools].\n\nIt should be able to:\n- [Capability 1]\n- [Capability 2]\n- [Capability 3]\n...\n\nThe agent should use [LLM model] as its base model.\n\nIt should maintain state about [state information].\n\nWhen the conversation starts, the agent should [initialization behavior].\n\nWhen the conversation ends, the agent should [termination behavior].\n\nAllow the agent to access the following tools:\n- [Tool 1]\n- [Tool 2]\n...\n\nSet [parameter name] to [value].\n</code></pre>"},{"location":"architecture/sentinelfile_spec/#example-sentinelfile","title":"Example Sentinelfile","text":"<pre><code># Sentinelfile for ResearchAssistant\n\nCreate an agent that helps with academic research tasks, finding relevant papers and summarizing their content.\n\nThe agent should have access to academic databases and search engines.\n\nIt should be able to:\n- Search for academic papers on a given topic\n- Summarize key findings from papers\n- Extract methods and results sections\n- Compare multiple papers\n- Generate literature review outlines\n- Create proper citations in multiple formats\n\nThe agent should use claude-3.7-sonnet as its base model.\n\nIt should maintain state about the current research topic, papers that have been reviewed, and key findings.\n\nWhen the conversation starts, the agent should introduce itself as a research assistant and ask about the user's research area.\n\nWhen the conversation ends, the agent should summarize the research findings and suggest next steps.\n\nAllow the agent to access the following tools:\n- Academic search\n- PDF parser\n- Citation generator\n- Web browser\n- Note taking\n\nSet search_depth to 15 papers maximum.\nSet citation_format to APA by default.\n</code></pre>"},{"location":"architecture/sentinelfile_spec/#parsing-process","title":"Parsing Process","text":"<p>When a Sentinelfile is processed by the <code>sentinel build</code> command:</p> <ol> <li>The natural language is sent to an LLM (default: Claude)</li> <li>The LLM extracts structured information into a standardized JSON format</li> <li>The structured definition is validated for completeness and consistency</li> <li>The definition is packaged into a Sentinel Image</li> </ol>"},{"location":"architecture/sentinelfile_spec/#structured-output","title":"Structured Output","text":"<p>While users write in natural language, the parser converts this to a structured format:</p> <pre><code>{\n  \"name\": \"research-assistant\",\n  \"description\": \"An agent that helps with academic research tasks\",\n  \"baseModel\": \"claude-3.7-sonnet\",\n  \"capabilities\": [\n    \"academic_search\",\n    \"summarization\",\n    \"extraction\",\n    \"comparison\",\n    \"outline_generation\",\n    \"citation_generation\"\n  ],\n  \"tools\": [\n    \"academic_search\",\n    \"pdf_parser\",\n    \"citation_generator\",\n    \"web_browser\",\n    \"note_taking\"\n  ],\n  \"stateSchema\": {\n    \"research_topic\": \"string\",\n    \"reviewed_papers\": \"array\",\n    \"key_findings\": \"map\"\n  },\n  \"lifecycle\": {\n    \"initialization\": \"Introduce as research assistant and ask about research area\",\n    \"termination\": \"Summarize findings and suggest next steps\"\n  },\n  \"parameters\": {\n    \"search_depth\": 15,\n    \"citation_format\": \"APA\"\n  }\n}\n</code></pre>"},{"location":"architecture/sentinelfile_spec/#best-practices","title":"Best Practices","text":"<ol> <li>Be Specific: Clearly define capabilities and behavior</li> <li>Use Plain Language: Avoid technical jargon unless necessary</li> <li>List Capabilities: Bullet points help the parser identify discrete functions</li> <li>Specify Tools: Explicitly list required tool access</li> <li>Define Initialization: Describe how the agent should start conversations</li> <li>Set Parameters: Include any configuration parameters with clear values</li> <li>Maintain Consistency: Ensure descriptions don't contradict themselves</li> </ol>"},{"location":"architecture/sentinelfile_spec/#limitations","title":"Limitations","text":"<ol> <li>Highly technical or domain-specific terminology may be misinterpreted</li> <li>Very complex agent behaviors might need to be simplified</li> <li>Custom tool configurations may require additional specification</li> <li>The parser may occasionally miss nuanced requirements</li> </ol>"},{"location":"architecture/sentinelfile_spec/#validation","title":"Validation","text":"<p>SentinelStacks includes a validation step that:</p> <ol> <li>Checks for internal consistency</li> <li>Verifies that all required fields are present</li> <li>Confirms that specified tools are available</li> <li>Validates that the base model is supported</li> <li>Ensures that parameters have valid values</li> </ol> <p>You can manually validate a Sentinelfile with:</p> <pre><code>sentinel validate\n</code></pre>"},{"location":"architecture/shim_architecture/","title":"Shim Architecture: LLM Provider Integration","text":"<p>The Shim architecture is a core component of SentinelStacks that enables agent portability across different LLM providers. This document explains how the shim system works and how it integrates with various LLM providers.</p>"},{"location":"architecture/shim_architecture/#overview","title":"Overview","text":"<p>The shim system provides a unified abstraction layer over different LLM providers (Claude, OpenAI, Google, Ollama). This architecture allows agents to be provider-agnostic, meaning they can run on any supported LLM without code changes.</p>"},{"location":"architecture/shim_architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/shim_architecture/#llmshim-interface","title":"LLMShim Interface","text":"<p>The LLMShim interface (<code>pkg/types/shim.go</code>) defines the standardized API for all LLM providers:</p> <pre><code>// LLMShim is an interface for interacting with different LLM providers\ntype LLMShim interface {\n    // Text completion methods\n    Completion(prompt string, maxTokens int, temperature float64, timeout time.Duration) (string, error)\n    CompletionWithContext(ctx context.Context, prompt string, maxTokens int, temperature float64) (string, error)\n\n    // Multimodal methods\n    MultimodalCompletion(input *Input, timeout time.Duration) (*Output, error)\n    MultimodalCompletionWithContext(ctx context.Context, input *Input) (*Output, error)\n\n    // Streaming methods\n    StreamCompletion(ctx context.Context, prompt string, maxTokens int, temperature float64) (&lt;-chan string, error)\n    StreamMultimodalCompletion(ctx context.Context, input *Input) (&lt;-chan *Chunk, error)\n\n    // System prompts\n    SetSystemPrompt(prompt string)\n\n    // Utility methods\n    ParseSentinelfile(content string) (map[string]interface{}, error)\n    SupportsMultimodal() bool\n    Close() error\n}\n</code></pre>"},{"location":"architecture/shim_architecture/#shimfactory","title":"ShimFactory","text":"<p>The ShimFactory (<code>internal/shim/shim.go</code>) creates the appropriate shim implementation based on the specified provider:</p> <pre><code>// ShimFactory creates a new LLM shim based on the provider\nfunc ShimFactory(provider, endpoint, apiKey, model string) (LLMShim, error) {\n    // Create config\n    config := Config{\n        Provider: provider,\n        Model:    model,\n        APIKey:   apiKey,\n        Endpoint: endpoint,\n        Timeout:  60 * time.Second, // Default timeout\n    }\n\n    // Create shim based on provider\n    switch provider {\n    case \"claude\":\n        return NewClaudeShim(config), nil\n    case \"openai\":\n        return NewOpenAIShim(config), nil\n    case \"ollama\":\n        return NewOllamaShim(config), nil\n    case \"google\":\n        return NewGoogleShim(config), nil\n    case \"mock\":\n        return NewMockShim(config), nil\n    default:\n        return nil, fmt.Errorf(\"unsupported provider: %s\", provider)\n    }\n}\n</code></pre>"},{"location":"architecture/shim_architecture/#provider-specific-implementations","title":"Provider-Specific Implementations","text":"<p>Each LLM provider has its own implementation that wraps the provider's API:</p>"},{"location":"architecture/shim_architecture/#claude-shim","title":"Claude Shim","text":"<p>The Claude Shim (<code>internal/shim/claude_shim.go</code>) integrates with Anthropic's Claude API:</p> <ul> <li>Supports text and multimodal inputs</li> <li>Implements streaming for real-time responses</li> <li>Handles Claude-specific parameters and models</li> </ul>"},{"location":"architecture/shim_architecture/#openai-shim","title":"OpenAI Shim","text":"<p>The OpenAI Shim (<code>internal/shim/openai_shim.go</code>) wraps OpenAI's API:</p> <ul> <li>Supports GPT models (3.5-turbo, 4, etc.)</li> <li>Handles multimodal inputs for vision-capable models</li> <li>Implements OpenAI's chat completion API with system prompts</li> </ul>"},{"location":"architecture/shim_architecture/#google-shim","title":"Google Shim","text":"<p>The Google Shim (<code>internal/shim/google_shim.go</code>) integrates with Google's Vertex AI and Gemini models:</p> <ul> <li>Supports Google's various AI models</li> <li>Handles Google-specific authentication and API calls</li> <li>Provides access to Gemini's multimodal capabilities</li> </ul>"},{"location":"architecture/shim_architecture/#ollama-shim","title":"Ollama Shim","text":"<p>The Ollama Shim (<code>internal/shim/ollama_shim.go</code>) enables using locally-hosted open-source models:</p> <ul> <li>Supports running models like Llama, Mistral, etc. via Ollama</li> <li>Implements a subset of features based on Ollama's capabilities</li> <li>Enables offline usage without external API dependencies</li> </ul>"},{"location":"architecture/shim_architecture/#mock-shim","title":"Mock Shim","text":"<p>The Mock Shim is used for testing:</p> <ul> <li>Simulates LLM responses without calling actual APIs</li> <li>Useful for development and testing</li> <li>Supports all interface methods with predefined responses</li> </ul>"},{"location":"architecture/shim_architecture/#key-features","title":"Key Features","text":""},{"location":"architecture/shim_architecture/#unified-abstraction","title":"Unified Abstraction","text":"<p>The shim provides a common interface for all providers, allowing agent code to remain provider-agnostic:</p> <pre><code>// Example usage in agent code\nshim, err := ShimFactory(\"claude\", \"\", apiKey, \"claude-3-sonnet\")\nif err != nil {\n    // Handle error\n}\n\n// The same code works regardless of provider\nresponse, err := shim.Completion(\"What is SentinelStacks?\", 1000, 0.7, 30*time.Second)\n</code></pre>"},{"location":"architecture/shim_architecture/#multimodal-support","title":"Multimodal Support","text":"<p>All providers implement a standardized interface for handling multimodal content (text + images):</p> <pre><code>// Create multimodal input\ninput := multimodal.NewInput()\ninput.AddText(\"What's in this image?\")\ninput.AddImage(imageData, \"image/jpeg\")\n\n// Process through any provider that supports multimodal\nif shim.SupportsMultimodal() {\n    output, err := shim.MultimodalCompletion(input, 60*time.Second)\n    // Handle output\n}\n</code></pre>"},{"location":"architecture/shim_architecture/#streaming-responses","title":"Streaming Responses","text":"<p>The streaming API allows for real-time responses from all providers:</p> <pre><code>// Stream responses from any provider\nstreamCh, err := shim.StreamCompletion(ctx, prompt, maxTokens, temperature)\nif err != nil {\n    // Handle error\n}\n\n// Process stream chunks\nfor chunk := range streamCh {\n    // Process each chunk as it arrives\n    fmt.Print(chunk)\n}\n</code></pre>"},{"location":"architecture/shim_architecture/#implementation-pattern","title":"Implementation Pattern","text":"<p>Each shim implementation follows a common pattern:</p> <ol> <li>Configuration: Accepts provider-specific configuration</li> <li>Delegation: Delegates to internal provider-specific implementation</li> <li>Fallback: Includes fallback mechanisms for graceful degradation</li> <li>Capability Checking: Implements capability checks (e.g., multimodal support)</li> <li>Context Management: Propagates context for cancellation and timeouts</li> </ol>"},{"location":"architecture/shim_architecture/#using-the-shim-in-agents","title":"Using the Shim in Agents","text":"<p>In SentinelStacks, agents are created with a specific shim but can be migrated to different providers:</p> <pre><code>// Create an agent with Claude\nagent, err := agent.NewAgent(\"my-agent\", \"claude\", \"claude-3-sonnet\", apiKey, \"\")\n\n// The same agent definition can later run with OpenAI\nagent, err := agent.NewAgent(\"my-agent\", \"openai\", \"gpt-4\", apiKey, \"\")\n</code></pre>"},{"location":"architecture/shim_architecture/#extending-with-new-providers","title":"Extending with New Providers","text":"<p>To add support for a new LLM provider:</p> <ol> <li>Create a new implementation file (e.g., <code>new_provider_shim.go</code>)</li> <li>Implement the <code>LLMShim</code> interface for the new provider</li> <li>Add the provider to the <code>ShimFactory</code> function</li> <li>Update capability checks as needed</li> </ol>"},{"location":"architecture/shim_architecture/#conclusion","title":"Conclusion","text":"<p>The shim architecture is a key component that enables SentinelStacks' provider-agnostic approach to AI agents. By abstracting provider-specific details behind a unified interface, it allows agents to be portable across different LLMs while preserving their core functionality. </p>"},{"location":"architecture/system_design/","title":"SentinelStacks System Design","text":"<p>This document provides a detailed overview of the SentinelStacks system architecture, explaining design decisions, component interactions, and technical considerations.</p>"},{"location":"architecture/system_design/#system-architecture-overview","title":"System Architecture Overview","text":"<p>SentinelStacks is built as a distributed system with clearly defined boundaries between components. The architecture follows these key principles:</p> <ol> <li>Separation of Concerns: Each component has a specific, well-defined responsibility</li> <li>Modularity: Components can be developed, deployed, and scaled independently</li> <li>Extensibility: The system is designed to be easily extended with new capabilities</li> <li>Compatibility: Follows industry standards where possible for interoperability</li> </ol>"},{"location":"architecture/system_design/#architecture-layers","title":"Architecture Layers","text":"<p>The system consists of several key layers:</p> <ol> <li>User Interface Layer</li> <li>CLI Tool</li> <li>Desktop Application</li> <li>Web Interface</li> <li> <p>SDK Libraries</p> </li> <li> <p>Core Services Layer</p> </li> <li>NLP Parser Service</li> <li>Image Builder Service</li> <li>Agent Runtime Service</li> <li>Registry Service</li> <li> <p>Authentication Service</p> </li> <li> <p>Runtime Layer</p> </li> <li>Sentinel Runtime</li> <li>Sentinel Shim</li> <li>State Manager</li> <li> <p>Tool Coordinator</p> </li> <li> <p>Integration Layer</p> </li> <li>LLM Provider Connectors</li> <li>External Tool Integrations</li> <li> <p>Third-Party Service Connectors</p> </li> <li> <p>Persistence Layer</p> </li> <li>Object Storage</li> <li>Metadata Database</li> <li>State Database</li> <li>Registry Database</li> </ol>"},{"location":"architecture/system_design/#component-details","title":"Component Details","text":""},{"location":"architecture/system_design/#sentinel-cli","title":"Sentinel CLI","text":"<p>The command-line interface serves as the primary interaction point for developers. Key design considerations:</p> <ul> <li>Go Implementation: Chosen for performance, cross-platform support, and single binary distribution</li> <li>Cobra Framework: Provides a consistent command structure and help documentation</li> <li>Local Configuration: Uses a configuration file in <code>~/.sentinel/config.json</code> for settings</li> <li>Offline Capability: Core functions work without internet connectivity</li> <li>Extensible: Plugin system allows adding custom commands</li> </ul>"},{"location":"architecture/system_design/#sentinel-desktop","title":"Sentinel Desktop","text":"<p>The desktop application provides a graphical interface for agent management:</p> <ul> <li>Electron Framework: Cross-platform desktop application</li> <li>React Frontend: Component-based UI architecture</li> <li>Local Agent Management: Manages local agents directly</li> <li>Visual Builder: Graphical agent building capabilities</li> <li>Monitoring Dashboard: Real-time monitoring of agent status and performance</li> </ul>"},{"location":"architecture/system_design/#nlp-parser","title":"NLP Parser","text":"<p>The parser converts natural language Sentinelfiles into structured agent definitions:</p> <ul> <li>Two-Stage Parsing: Pre-processing followed by LLM-based understanding</li> <li>Contextual Understanding: Maintains context across complex descriptions</li> <li>Validation Logic: Ensures the extracted definition matches the intent</li> <li>Default Inference: Applies sensible defaults for unspecified parameters</li> <li>Extensible Model: Can work with different LLM backends</li> </ul>"},{"location":"architecture/system_design/#image-builder","title":"Image Builder","text":"<p>Builds Sentinel Images from structured agent definitions:</p> <ul> <li>Layer-Based Approach: Similar to Docker's layer concept</li> <li>Dependency Resolution: Automatically resolves and includes dependencies</li> <li>Version Tracking: Built-in versioning for reproducibility</li> <li>Cache Optimization: Reuses layers from previous builds</li> <li>Validation: Ensures the image meets all requirements before completion</li> </ul>"},{"location":"architecture/system_design/#agent-runtime","title":"Agent Runtime","text":"<p>Executes agent instances with appropriate capabilities:</p> <ul> <li>Isolation: Each agent runs in its own isolated environment</li> <li>Resource Control: Limits CPU, memory, and API call usage</li> <li>Lifecycle Management: Handles initialization, execution, and termination</li> <li>State Persistence: Maintains agent state across sessions</li> <li>Monitoring: Collects metrics and logs for monitoring</li> </ul>"},{"location":"architecture/system_design/#sentinel-shim","title":"Sentinel Shim","text":"<p>Abstracts differences between LLM providers:</p> <ul> <li>Unified Interface: Common interface across different LLMs</li> <li>Provider-Specific Optimizations: Optimizes prompts for each provider</li> <li>Context Management: Handles context window limitations</li> <li>Caching: Implements caching for efficiency</li> <li>Fallback Mechanisms: Provides graceful degradation when primary providers fail</li> </ul>"},{"location":"architecture/system_design/#registry-service","title":"Registry Service","text":"<p>Stores and distributes agent definitions:</p> <ul> <li>Content-Addressable Storage: Uses content hashes for immutability</li> <li>Access Control: Granular permissions for repositories</li> <li>Versioning: Supports semantic versioning</li> <li>Metadata: Rich metadata for discoverability</li> <li>Search Capabilities: Full-text search and filtering</li> </ul>"},{"location":"architecture/system_design/#state-manager","title":"State Manager","text":"<p>Handles agent state persistence and synchronization:</p> <ul> <li>Schema Validation: Ensures state conforms to the defined schema</li> <li>Persistence Options: Multiple backend options (local, Redis, database)</li> <li>Synchronization: Handles state synchronization for distributed agents</li> <li>Migration Support: Manages state schema migrations</li> <li>Snapshot &amp; Restore: Provides point-in-time state snapshots</li> </ul>"},{"location":"architecture/system_design/#data-flow","title":"Data Flow","text":""},{"location":"architecture/system_design/#agent-creation-flow","title":"Agent Creation Flow","text":"<ol> <li>User writes a natural language Sentinelfile</li> <li>Parser converts it to a structured agent definition</li> <li>Builder creates a Sentinel Image from the definition</li> <li>Image is stored locally or pushed to a registry</li> </ol>"},{"location":"architecture/system_design/#agent-execution-flow","title":"Agent Execution Flow","text":"<ol> <li>Runtime loads an image from local storage or registry</li> <li>Runtime initializes the agent environment</li> <li>Shim establishes connection to the appropriate LLM provider</li> <li>Agent begins execution with the provided state and tools</li> <li>State Manager persists state changes</li> <li>Tool Coordinator handles tool access and permissions</li> </ol>"},{"location":"architecture/system_design/#registry-interaction-flow","title":"Registry Interaction Flow","text":"<ol> <li>User authenticates with the registry</li> <li>Images are pushed to or pulled from the registry</li> <li>Registry validates and stores metadata</li> <li>Search and discovery services index the metadata</li> <li>Access control enforces permissions</li> </ol>"},{"location":"architecture/system_design/#technical-specifications","title":"Technical Specifications","text":""},{"location":"architecture/system_design/#agent-definition-format","title":"Agent Definition Format","text":"<p>The structured agent definition is stored in JSON format:</p> <pre><code>{\n  \"name\": \"research-assistant\",\n  \"description\": \"An agent that helps with academic research\",\n  \"version\": \"1.0.0\",\n  \"baseModel\": \"claude-3.7-sonnet\",\n  \"capabilities\": [\n    \"web_search\",\n    \"document_analysis\",\n    \"summarization\",\n    \"citation_management\"\n  ],\n  \"stateSchema\": {\n    \"research_topic\": {\n      \"type\": \"string\",\n      \"description\": \"Current research topic\"\n    },\n    \"reviewed_papers\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": { \"type\": \"string\" },\n          \"authors\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n          \"url\": { \"type\": \"string\" },\n          \"notes\": { \"type\": \"string\" }\n        }\n      }\n    }\n  },\n  \"parameters\": {\n    \"memory_retention\": \"7d\",\n    \"search_depth\": 10,\n    \"citation_format\": \"APA\"\n  },\n  \"lifecycle\": {\n    \"initialization\": \"Introduce as research assistant and ask about research area\",\n    \"termination\": \"Summarize findings and suggest next steps\"\n  },\n  \"tools\": [\n    {\n      \"name\": \"web_search\",\n      \"config\": {\n        \"default_provider\": \"brave\",\n        \"max_results\": 10\n      }\n    },\n    {\n      \"name\": \"pdf_parser\",\n      \"config\": {\n        \"extract_citations\": true\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"architecture/system_design/#image-format","title":"Image Format","text":"<p>Sentinel Images use a layered format similar to OCI container images:</p> <ul> <li>Manifest Layer: Contains metadata and references to other layers</li> <li>Definition Layer: The structured agent definition</li> <li>State Schema Layer: Schema for the agent's state</li> <li>Tool Configuration Layer: Configuration for tools</li> <li>Dependency Layer: References to other images or resources</li> </ul>"},{"location":"architecture/system_design/#state-storage","title":"State Storage","text":"<p>Agent state is stored in a structured format:</p> <pre><code>{\n  \"schema_version\": \"1.0.0\",\n  \"agent_id\": \"abc123\",\n  \"created_at\": \"2025-03-30T12:00:00Z\",\n  \"updated_at\": \"2025-03-31T09:00:00Z\",\n  \"data\": {\n    \"research_topic\": \"Climate change mitigation strategies\",\n    \"reviewed_papers\": [\n      {\n        \"title\": \"Recent Advances in Carbon Capture\",\n        \"authors\": [\"Smith, J.\", \"Jones, M.\"],\n        \"url\": \"https://example.com/paper1\",\n        \"notes\": \"Discusses direct air capture technologies\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"architecture/system_design/#security-model","title":"Security Model","text":""},{"location":"architecture/system_design/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>User Authentication: OAuth 2.0 with support for multiple identity providers</li> <li>Client Authentication: API keys or client certificates</li> <li>Authorization: Role-based access control (RBAC) with fine-grained permissions</li> <li>Token Management: Short-lived tokens with refresh capability</li> </ul>"},{"location":"architecture/system_design/#agent-security","title":"Agent Security","text":"<ul> <li>Execution Isolation: Agents run in isolated environments</li> <li>Tool Permissions: Capability-based security model for tool access</li> <li>API Rate Limiting: Prevents abuse of LLM APIs</li> <li>Data Access Control: Controls what data agents can access</li> <li>Audit Logging: Comprehensive logging of all agent actions</li> </ul>"},{"location":"architecture/system_design/#registry-security","title":"Registry Security","text":"<ul> <li>Image Signing: Cryptographic signing of images</li> <li>Vulnerability Scanning: Scans for known vulnerabilities</li> <li>Access Control: Repository-level access controls</li> <li>Transport Security: TLS for all communications</li> <li>Content Validation: Validates image contents before storage</li> </ul>"},{"location":"architecture/system_design/#scalability-approach","title":"Scalability Approach","text":""},{"location":"architecture/system_design/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless Components: Core services are stateless for horizontal scaling</li> <li>Load Balancing: Distributes traffic across service instances</li> <li>Data Partitioning: Shards data by user, organization, or other dimensions</li> <li>Caching: Multi-level caching for improved performance</li> </ul>"},{"location":"architecture/system_design/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Resource Optimization: Efficient resource usage within components</li> <li>Asynchronous Processing: Background processing for intensive tasks</li> <li>Batching: Combines operations where possible for efficiency</li> <li>Connection Pooling: Reuses connections to databases and external services</li> </ul>"},{"location":"architecture/system_design/#distributed-architecture","title":"Distributed Architecture","text":"<ul> <li>Service Discovery: Automatic discovery of service instances</li> <li>Circuit Breaking: Prevents cascading failures</li> <li>Eventual Consistency: For registry and non-critical operations</li> <li>Strong Consistency: For agent state and critical operations</li> </ul>"},{"location":"architecture/system_design/#deployment-models","title":"Deployment Models","text":""},{"location":"architecture/system_design/#local-development","title":"Local Development","text":"<ul> <li>Single-binary CLI with embedded services</li> <li>Local agent runtime</li> <li>SQLite for persistence</li> <li>In-memory caching</li> </ul>"},{"location":"architecture/system_design/#small-teams","title":"Small Teams","text":"<ul> <li>Containerized services</li> <li>Shared registry</li> <li>PostgreSQL for persistence</li> <li>Redis for caching and pub/sub</li> </ul>"},{"location":"architecture/system_design/#enterprise","title":"Enterprise","text":"<ul> <li>Kubernetes-orchestrated services</li> <li>Multiple registry instances with replication</li> <li>High-availability database clusters</li> <li>Distributed caching</li> <li>Integration with enterprise identity providers</li> </ul>"},{"location":"architecture/system_design/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/system_design/#metrics","title":"Metrics","text":"<ul> <li>System Metrics: CPU, memory, disk, network</li> <li>Application Metrics: Request rates, latencies, error rates</li> <li>Business Metrics: Active agents, images built, registry activity</li> </ul>"},{"location":"architecture/system_design/#logging","title":"Logging","text":"<ul> <li>Structured Logging: JSON-formatted logs</li> <li>Log Aggregation: Centralized log collection</li> <li>Log Retention: Configurable retention policies</li> <li>Log Analysis: Search and analysis capabilities</li> </ul>"},{"location":"architecture/system_design/#tracing","title":"Tracing","text":"<ul> <li>Distributed Tracing: OpenTelemetry integration</li> <li>Span Collection: Traces request flows across services</li> <li>Trace Sampling: Configurable sampling rates</li> <li>Trace Visualization: Visual representation of request flows</li> </ul>"},{"location":"architecture/system_design/#roadmap-considerations","title":"Roadmap Considerations","text":""},{"location":"architecture/system_design/#near-term-priorities","title":"Near-Term Priorities","text":"<ul> <li>Core CLI functionality</li> <li>Basic agent runtime</li> <li>Local registry</li> <li>Single LLM provider support</li> </ul>"},{"location":"architecture/system_design/#mid-term-goals","title":"Mid-Term Goals","text":"<ul> <li>Desktop application</li> <li>Multiple LLM provider support</li> <li>Public registry</li> <li>Enhanced tool integration</li> </ul>"},{"location":"architecture/system_design/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li>Enterprise features</li> <li>Advanced agent networks</li> <li>Marketplace ecosystem</li> <li>On-premises deployment options</li> </ul>"},{"location":"development/git_strategy/","title":"Git Workflow Strategy","text":"<p>This document outlines the Git workflow strategy for the SentinelStacks project.</p>"},{"location":"development/git_strategy/#branching-strategy","title":"Branching Strategy","text":"<p>We follow a trunk-based development approach with feature branches:</p> <pre><code>main (default branch)\n\u251c\u2500\u2500 feature/add-openai-integration\n\u251c\u2500\u2500 bugfix/fix-ollama-timeout\n\u2514\u2500\u2500 docs/update-provider-docs\n</code></pre>"},{"location":"development/git_strategy/#branch-naming","title":"Branch Naming","text":"<ul> <li>Feature branches: <code>feature/descriptive-name</code></li> <li>Bugfix branches: <code>bugfix/issue-description</code></li> <li>Documentation branches: <code>docs/topic-name</code></li> <li>Release branches: <code>release/vX.Y.Z</code></li> </ul>"},{"location":"development/git_strategy/#commit-guidelines","title":"Commit Guidelines","text":""},{"location":"development/git_strategy/#commit-message-format","title":"Commit Message Format","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>"},{"location":"development/git_strategy/#types","title":"Types","text":"<ul> <li>feat: A new feature</li> <li>fix: A bug fix</li> <li>docs: Documentation changes</li> <li>style: Changes that don't affect code function (formatting, etc.)</li> <li>refactor: Code changes that neither fix bugs nor add features</li> <li>test: Adding or modifying tests</li> <li>chore: Changes to build process, tooling, etc.</li> </ul>"},{"location":"development/git_strategy/#example-commit-messages","title":"Example Commit Messages","text":"<pre><code>feat(shim): add OpenAI integration\n\nImplement OpenAI provider shim for GPT-4 and GPT-3.5 models.\nIncludes token counting and error handling.\n\nFixes #42\n</code></pre> <pre><code>fix(cli): resolve panic when empty config file\n\nThe CLI would panic when encountering an empty config file.\nNow it properly initializes default values.\n</code></pre>"},{"location":"development/git_strategy/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a branch from <code>main</code> using the naming convention above</li> <li>Implement your changes with atomic commits following our commit guidelines</li> <li>Ensure tests pass and add new ones as needed</li> <li>Update documentation if required</li> <li>Open a PR to <code>main</code> with a clear description of changes</li> <li>Request reviews from at least one maintainer</li> <li>Address review feedback</li> <li>Squash and merge once approved</li> </ol>"},{"location":"development/git_strategy/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of the changes\n\n## Type of change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## How Has This Been Tested?\nDescribe the tests you ran\n\n## Checklist\n- [ ] My code follows the project's style guidelines\n- [ ] I have added tests that prove my fix or feature works\n- [ ] I have updated documentation as needed\n- [ ] All tests pass locally and in CI\n</code></pre>"},{"location":"development/git_strategy/#release-process","title":"Release Process","text":"<ol> <li>Create a release branch <code>release/vX.Y.Z</code> from <code>main</code></li> <li>Bump version numbers and update CHANGELOG.md</li> <li>Create a PR from the release branch to <code>main</code></li> <li>After approval and merge, tag the release commit</li> <li>Create a GitHub release with release notes</li> </ol>"},{"location":"development/git_strategy/#git-best-practices","title":"Git Best Practices","text":"<ul> <li>Keep branches short-lived (aim for &lt; 1 week)</li> <li>Rebase feature branches on <code>main</code> frequently</li> <li>Write descriptive commit messages</li> <li>Squash commits when merging to maintain a clean history</li> <li>Never force push to <code>main</code></li> <li>Use <code>git pull --rebase</code> to avoid merge commits</li> </ul>"},{"location":"development/git_strategy/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>Our CI/CD pipeline automatically:</p> <ul> <li>Runs tests on every PR</li> <li>Builds and tests the project on pushes to <code>main</code></li> <li>Deploys documentation on merges to <code>main</code></li> <li>Builds and pushes Docker images for tagged releases </li> </ul>"},{"location":"examples/chatbot/","title":"Basic Chatbot Example","text":"<p>This example demonstrates how to build a simple chatbot agent using SentinelStacks with the Llama 3 model via Ollama.</p>"},{"location":"examples/chatbot/#sentinelfile","title":"Sentinelfile","text":"<pre><code>name: basicchatbot\ndescription: Create an agent that provides helpful, friendly chat responses with a unique personality.\ncapabilities:\n  - Engage in casual conversation\n  - Answer general knowledge questions\n  - Remember context from earlier in the conversation\n  - Provide thoughtful and nuanced responses\n  - Maintain a consistent personality\n  - Gracefully handle inappropriate requests\nmodel: \n  base: llama3\nstate:\n  - conversation_history\n  - user_preferences\ninitialization:\n  introduction: \"Hello! I'm ready to assist you.\"\ntermination:\n  farewell: \"Thank you for chatting with me. Have a great day!\"\ntools:\n  - web_search:\n      purpose: For looking up factual information\n  - calculator:\n      purpose: For performing mathematical operations\n  - datetime:\n      purpose: For answering time-related queries\npersonality:\n  tone: friendly\n  response_length: medium\n  memory_depth: 10\n</code></pre>"},{"location":"examples/chatbot/#building-the-agent","title":"Building the Agent","text":"<p>Build the chatbot agent using the following command:</p> <pre><code>./bin/sentinel build -t demo/chatbot:v1 -f examples/chatbot/Sentinelfile \\\n  --llm ollama --llm-endpoint https://your-ollama-endpoint --llm-model llama3\n</code></pre>"},{"location":"examples/chatbot/#running-the-agent","title":"Running the Agent","text":"<p>Run the chatbot with:</p> <pre><code>./bin/sentinel run demo/chatbot:v1\n</code></pre> <p>This will start an interactive session where you can chat with your agent.</p>"},{"location":"examples/chatbot/#features","title":"Features","text":"<ul> <li>Personality: The agent maintains a friendly tone and consistent personality</li> <li>Context Awareness: Remembers previous exchanges in the conversation</li> <li>Tool Usage: Can access web search, calculator, and date/time tools</li> <li>Response Quality: Provides thoughtful and nuanced responses</li> <li>Safety: Gracefully handles inappropriate requests</li> </ul>"},{"location":"examples/chatbot/#customization","title":"Customization","text":"<p>You can customize this chatbot by modifying the Sentinelfile:</p> <ul> <li>Change the <code>model.base</code> to use different LLM models</li> <li>Adjust the <code>personality</code> settings to change tone and response style</li> <li>Add or remove <code>capabilities</code> to match your use case</li> <li>Modify <code>tools</code> to grant access to different functions</li> </ul>"},{"location":"examples/chatbot/#next-steps","title":"Next Steps","text":"<ul> <li>Try building similar agents with different personalities</li> <li>Experiment with different LLM providers like Claude</li> <li>Add custom tools specific to your application</li> <li>Implement specialized knowledge bases for domain-specific chatbots </li> </ul>"},{"location":"examples/finance-advisor/","title":"Financial Advisor Example","text":"<p>This example demonstrates how to build a specialized financial advisory agent using SentinelStacks with Claude 3 Sonnet. The agent showcases advanced features such as compliance controls, data sources integration, and specialized financial tools.</p>"},{"location":"examples/finance-advisor/#overview","title":"Overview","text":"<p>The Financial Advisor agent is designed to provide personalized financial guidance, including investment recommendations, retirement planning, tax optimization, and risk assessment. It demonstrates how to integrate external data sources and implement regulatory compliance in AI agents.</p>"},{"location":"examples/finance-advisor/#sentinelfile","title":"Sentinelfile","text":"<pre><code>name: finance-advisor\ndescription: An intelligent financial advisor that analyzes financial data, provides investment recommendations, and helps with financial planning.\ncapabilities:\n  - Financial data analysis and interpretation\n  - Investment strategy recommendations\n  - Portfolio diversification planning\n  - Risk assessment and management\n  - Retirement planning and projections\n  - Tax optimization strategies\nmodel:\n  base: claude3\n  parameters:\n    temperature: 0.2\n    top_p: 0.9\n  guardrails:\n    - no_financial_guarantees\n    - ethical_investment_only\n    - transparency_required\nstate:\n  - portfolio_data\n  - market_knowledge\n  - user_preferences\n  - risk_profile\n  - transaction_history\n# Additional configuration omitted for brevity\ndata_sources:\n  - market_data:\n      update_frequency: daily\n      source: financial_api\n      access: read_only\n  - economic_indicators:\n      update_frequency: weekly\n      source: economic_data_service\n      access: read_only\n  - portfolio_data:\n      update_frequency: realtime\n      source: user_input\n      access: read_write\n  - tax_regulations:\n      update_frequency: quarterly\n      source: tax_database\n      access: read_only\ncompliance:\n  regulatory_frameworks:\n    - sec_regulations\n    - fiduciary_standards\n    - consumer_protection_laws\n  disclaimers:\n    - not_licensed_financial_advisor\n    - no_guarantees_of_returns\n    - consult_professional_disclaimer\n  data_handling:\n    - financial_data_privacy\n    - secure_storage_requirement\n</code></pre>"},{"location":"examples/finance-advisor/#building-the-agent","title":"Building the Agent","text":"<p>Build the financial advisor agent using the following command:</p> <pre><code>./bin/sentinel build -t demo/finance-advisor:v1 -f examples/finance-advisor/Sentinelfile \\\n  --llm anthropic --llm-model claude-3-sonnet\n</code></pre>"},{"location":"examples/finance-advisor/#running-the-agent","title":"Running the Agent","text":"<p>Run the financial advisor with:</p> <pre><code>./bin/sentinel run demo/finance-advisor:v1\n</code></pre> <p>This will start an interactive session where you can discuss your financial situation and receive personalized advice.</p>"},{"location":"examples/finance-advisor/#key-features","title":"Key Features","text":""},{"location":"examples/finance-advisor/#compliance-controls","title":"Compliance Controls","text":"<p>The Finance Advisor demonstrates how to implement regulatory compliance in AI agents:</p> <ul> <li>Regulatory Frameworks: Adherence to SEC regulations, fiduciary standards, and consumer protection laws</li> <li>Disclaimers: Clear communication that the agent is not a licensed financial advisor</li> <li>Data Handling: Privacy and security requirements for financial data</li> </ul>"},{"location":"examples/finance-advisor/#specialized-financial-tools","title":"Specialized Financial Tools","text":"<p>The agent has access to several specialized tools:</p> <ul> <li>Market Analyzer: Tracks market conditions and trends in major indices</li> <li>Portfolio Simulator: Projects performance under different scenarios</li> <li>Tax Calculator: Estimates tax implications of financial decisions</li> <li>Retirement Calculator: Projects retirement savings and income</li> <li>Risk Assessor: Evaluates investment risk levels</li> </ul>"},{"location":"examples/finance-advisor/#data-source-integration","title":"Data Source Integration","text":"<p>The agent integrates multiple data sources:</p> <ul> <li>Real-time market data</li> <li>Economic indicators</li> <li>User portfolio information</li> <li>Tax regulations</li> </ul>"},{"location":"examples/finance-advisor/#model-guardrails","title":"Model Guardrails","text":"<p>The agent implements specific guardrails to ensure responsible financial advice:</p> <ul> <li>No financial guarantees</li> <li>Ethical investment guidelines</li> <li>Transparency in recommendations</li> </ul>"},{"location":"examples/finance-advisor/#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Retirement Planning: Creating long-term retirement savings strategies</li> <li>Investment Advisory: Recommending diversified investment portfolios</li> <li>Tax Optimization: Suggesting tax-efficient investment strategies</li> <li>Risk Assessment: Analyzing and mitigating financial risks</li> <li>Financial Education: Explaining financial concepts and strategies</li> </ul>"},{"location":"examples/finance-advisor/#customization","title":"Customization","text":"<p>You can customize this agent by modifying the Sentinelfile:</p> <ul> <li>Change specializations and priorities</li> <li>Adjust risk tolerance parameters</li> <li>Add additional data sources</li> <li>Modify compliance requirements</li> <li>Integrate with specific financial APIs</li> </ul>"},{"location":"examples/finance-advisor/#responsible-use","title":"Responsible Use","text":"<p>Financial advice can significantly impact people's lives, so this agent should be used responsibly:</p> <ul> <li>Always disclose that advice comes from an AI system</li> <li>Ensure proper disclaimers are presented</li> <li>Consider local financial regulations</li> <li>Use as a supplementary tool alongside professional advisors </li> </ul>"},{"location":"examples/nlp-generator/","title":"NLP-to-Agent Generator","text":""},{"location":"examples/nlp-generator/#overview","title":"Overview","text":"<p>The NLP-to-Agent Generator allows users to create SentinelStacks agents from natural language descriptions. This powerful tool bridges the gap between human language and agent definitions, making agent creation accessible to users without technical expertise in YAML or agent configuration.</p>"},{"location":"examples/nlp-generator/#how-it-works","title":"How It Works","text":"<p>The NLP-to-Agent process works as follows:</p> <ol> <li>Natural Language Input: Users describe the agent they want to create in plain English.</li> <li>LLM Processing: The description is sent to a Large Language Model (like Claude).</li> <li>YAML Generation: The LLM generates a structured Sentinelfile YAML based on the description.</li> <li>Validation: The generated YAML is validated against the Sentinelfile schema.</li> <li>File Creation: The necessary files are created in the output directory.</li> <li>Agent Building: The agent is built using the SentinelStacks CLI.</li> </ol>"},{"location":"examples/nlp-generator/#example-interaction","title":"Example Interaction","text":"<p>User description: <pre><code>Create a travel planning assistant that can help users find flights, hotels, and attractions.\nIt should be friendly and conversational, with knowledge of popular destinations. The agent\nshould ask about budget, dates, and preferences, then provide personalized recommendations.\n</code></pre></p> <p>Generated Sentinelfile: <pre><code>name: travel-assistant\ndescription: Travel planning assistant that helps with flights, hotels, and attractions\ncapabilities:\n  - Find and recommend flights based on user preferences\n  - Suggest hotels within user's budget\n  - Recommend attractions and activities at destinations\n  - Create personalized travel itineraries\nmodel:\n  base: llama3\n  parameters:\n    temperature: 0.7\n    top_p: 0.95\nstate:\n  - conversation_history\n  - user_preferences:\n      travel_dates: null\n      destination: null\n      budget: null\n      interests: []\ntools:\n  - web_search:\n      purpose: Looking up travel information\n  - calculator:\n      purpose: Calculating costs and budgets\n  - date_time:\n      purpose: Checking travel dates and availability\ninitialization:\n  introduction: \"Hello! I'm your travel planning assistant. I can help you find flights, hotels, and attractions for your next trip. Where are you thinking of going?\"\ntermination:\n  farewell: \"Thank you for planning your trip with me. Have a wonderful journey!\"\npersonality:\n  tone: friendly\n  style: conversational\n  traits:\n    - knowledgeable\n    - helpful\n    - enthusiastic\n</code></pre></p>"},{"location":"examples/nlp-generator/#implementation","title":"Implementation","text":"<p>The NLP-to-Agent Generator is implemented in Go. Here's a simplified version of how it processes natural language input:</p> <pre><code>func (g *Generator) ProcessNaturalLanguage(input string) (*SentinelfileResponse, error) {\n    // Extract agent name and tag from input if possible\n    g.extractNameAndTag(input)\n\n    // Prepare prompt for LLM\n    prompt := g.buildPrompt(input)\n\n    // Send to LLM API\n    yamlContent, metadata, err := g.callLLM(prompt)\n    if err != nil {\n        return nil, fmt.Errorf(\"LLM processing error: %v\", err)\n    }\n\n    response := &amp;SentinelfileResponse{\n        Sentinelfile: yamlContent,\n        Metadata:     metadata,\n    }\n\n    // Generate files if enabled\n    if g.GenerateFiles {\n        err = g.generateFiles(response)\n        if err != nil {\n            return response, fmt.Errorf(\"file generation error: %v\", err)\n        }\n    }\n\n    return response, nil\n}\n</code></pre>"},{"location":"examples/nlp-generator/#cli-integration","title":"CLI Integration","text":"<p>The NLP-to-Agent Generator is integrated with the SentinelStacks CLI, allowing users to create agents directly from natural language descriptions. The following commands are available:</p> <pre><code># Create an agent from a natural language description\nsentinel create --from-nlp \"Create a customer service agent that helps with product inquiries\"\n\n# Create an agent from a file containing a natural language description\nsentinel create --from-nlp-file agent-description.txt\n\n# Create an agent interactively\nsentinel create --interactive\n\n# Apply a template to the natural language description\nsentinel create --from-nlp \"Answer math questions\" --template tutor\n\n# Edit the generated Sentinelfile before building\nsentinel create --from-nlp \"Create a travel planning assistant\" --edit\n\n# Specify LLM provider and model\nsentinel create --from-nlp \"Create a code review assistant\" --llm anthropic --llm-model claude-3-opus\n</code></pre> <p>The CLI integration provides several options for customizing the agent creation process:</p> <ul> <li>Templates: Use pre-defined templates for common agent types</li> <li>Interactive Mode: Guided agent creation with prompts and suggestions</li> <li>Edit Before Building: Review and modify the generated Sentinelfile</li> <li>LLM Selection: Choose which LLM provider and model to use</li> </ul>"},{"location":"examples/nlp-generator/#benefits","title":"Benefits","text":"<p>The NLP-to-Agent Generator offers several advantages:</p> <ol> <li>Accessibility: Non-technical users can create agents without learning YAML or understanding the full agent configuration.</li> <li>Rapid Prototyping: Quickly test different agent concepts without writing detailed configuration files.</li> <li>Exploration: Discover the capabilities of the agent system through natural language descriptions.</li> </ol>"},{"location":"examples/nlp-generator/#advanced-usage","title":"Advanced Usage","text":"<p>For more advanced use cases, you can:</p> <ul> <li>Use Templates: Start with a template and customize it with natural language</li> <li>Hybrid Approach: Generate a base Sentinelfile with NLP and then refine it manually</li> <li>Iterative Refinement: Generate an agent, test it, and then regenerate with more specific instructions </li> </ul>"},{"location":"examples/research-assistant/","title":"Research Assistant Example","text":"<p>This example demonstrates how to build an advanced research assistant agent using SentinelStacks with Claude 3 Opus.</p>"},{"location":"examples/research-assistant/#overview","title":"Overview","text":"<p>The Research Assistant is a sophisticated agent designed to assist with in-depth research tasks. It can search for information, analyze documents, generate citations, take notes, and create structured research reports.</p>"},{"location":"examples/research-assistant/#sentinelfile","title":"Sentinelfile","text":"<pre><code>name: research-assistant\ndescription: An advanced research assistant that can search, analyze, and summarize information from various sources.\ncapabilities:\n  - Search for and retrieve information from the web\n  - Analyze and summarize retrieved information\n  - Answer questions with citations\n  - Generate structured reports on research topics\n  - Maintain research context and session history\n  - Follow specific research methodologies\nmodel:\n  base: claude3\n  context_window: 100000\n  parameters:\n    temperature: 0.3\n    top_p: 0.95\nstate:\n  - research_history\n  - search_results\n  - document_cache\n  - bibliography\ninitialization:\n  introduction: \"I'm your research assistant. What topic would you like me to research today?\"\n  setup_actions:\n    - initialize_research_session\n    - check_available_tools\ntermination:\n  farewell: \"Thank you for using the research assistant. Your research session and findings have been saved.\"\n  cleanup_actions:\n    - save_research_session\n    - generate_citation_report\ntools:\n  - web_search:\n      purpose: For searching the internet for up-to-date information\n      parameters:\n        max_results: 10\n        search_depth: 2\n  - document_reader:\n      purpose: For reading and analyzing PDFs and other documents\n      parameters:\n        max_page_count: 500\n        formats: [pdf, docx, txt, html]\n  - citation_generator:\n      purpose: For generating properly formatted citations\n      parameters:\n        formats: [APA, MLA, Chicago, IEEE]\n  - note_taking:\n      purpose: For saving important information during research\n  - report_generator:\n      purpose: For creating structured research reports\npersonality:\n  tone: professional\n  detail_level: high\n  objectivity: high\nworkflow:\n  research_methodology:\n    - initial_query_refinement\n    - source_gathering\n    - information_extraction\n    - analysis_and_synthesis\n    - conclusion_formulation\n    - citation_and_bibliography\n  process_controls:\n    auto_citation: true\n    fact_checking: true\n    bias_detection: true\nsecurity:\n  information_handling:\n    private_data_policy: strict\n    source_validation: required\n  output_controls:\n    citation_required: true\n    uncertainty_disclosure: required\n</code></pre>"},{"location":"examples/research-assistant/#building-the-agent","title":"Building the Agent","text":"<p>Build the research assistant agent using the following command:</p> <pre><code>./bin/sentinel build -t demo/research-assistant:v1 -f examples/research-assistant/Sentinelfile \\\n  --llm anthropic --llm-model claude-3-opus\n</code></pre>"},{"location":"examples/research-assistant/#running-the-agent","title":"Running the Agent","text":"<p>Run the research assistant with:</p> <pre><code>./bin/sentinel run demo/research-assistant:v1\n</code></pre> <p>This will start an interactive session where you can ask the agent to research topics for you.</p>"},{"location":"examples/research-assistant/#advanced-features","title":"Advanced Features","text":""},{"location":"examples/research-assistant/#research-methodology","title":"Research Methodology","text":"<p>The agent follows a structured research methodology:</p> <ol> <li>Initial Query Refinement: Clarifies the research question</li> <li>Source Gathering: Collects relevant sources</li> <li>Information Extraction: Extracts key information from sources</li> <li>Analysis and Synthesis: Analyzes and combines information</li> <li>Conclusion Formulation: Draws conclusions from the analysis</li> <li>Citation and Bibliography: Properly cites all sources</li> </ol>"},{"location":"examples/research-assistant/#tool-integration","title":"Tool Integration","text":"<p>The agent has access to several tools:</p> <ul> <li>Web Search: Searches the internet for up-to-date information</li> <li>Document Reader: Reads and analyzes various document formats</li> <li>Citation Generator: Creates properly formatted citations</li> <li>Note Taking: Saves important information during research</li> <li>Report Generator: Creates structured research reports</li> </ul>"},{"location":"examples/research-assistant/#security-controls","title":"Security Controls","text":"<p>The agent has security features to ensure responsible information handling:</p> <ul> <li>Strict private data policy</li> <li>Required source validation</li> <li>Required citations</li> <li>Disclosure of uncertainty</li> </ul>"},{"location":"examples/research-assistant/#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Academic research on specific topics</li> <li>Literature reviews</li> <li>Market research</li> <li>Technology trend analysis</li> <li>Competitive intelligence gathering</li> <li>Fact-checking and verification</li> </ul>"},{"location":"examples/research-assistant/#customization","title":"Customization","text":"<p>You can customize this agent by modifying the Sentinelfile:</p> <ul> <li>Adjust model parameters for different research styles</li> <li>Configure different citation formats</li> <li>Change the research methodology</li> <li>Add or remove specific tools</li> <li>Modify security controls </li> </ul>"},{"location":"examples/team-collaboration/","title":"Team Collaboration Example","text":"<p>This example demonstrates how to build a team of collaborative agents using SentinelStacks, where multiple specialized agents work together under the coordination of a manager agent.</p>"},{"location":"examples/team-collaboration/#overview","title":"Overview","text":"<p>The Team Collaboration example showcases a system of four interacting agents:</p> <ol> <li>Project Manager - Coordinates the team, assigns tasks, and monitors progress</li> <li>Research Specialist - Gathers and analyzes information</li> <li>Content Writer - Creates and edits content based on research</li> <li>Quality Reviewer - Evaluates content and provides improvement feedback</li> </ol> <p>This multi-agent system demonstrates how SentinelStacks can be used to create complex workflows with specialized agents that communicate and collaborate to achieve a common goal.</p>"},{"location":"examples/team-collaboration/#sentinelfiles","title":"Sentinelfiles","text":""},{"location":"examples/team-collaboration/#project-manager-agent","title":"Project Manager Agent","text":"<pre><code>name: project-manager\ndescription: A project manager agent that coordinates a team of specialized agents to complete complex tasks.\ncapabilities:\n  - Task decomposition and delegation\n  - Progress tracking and coordination\n  - Decision making based on team input\n  - Problem resolution and resource allocation\n  - Quality assessment and feedback\nmodel:\n  base: claude3\n  parameters:\n    temperature: 0.2\n    top_p: 0.9\n# Additional configuration omitted for brevity\ncommunication:\n  channels:\n    - agent_message_bus:\n        access: read_write\n        purpose: Primary communication channel with other agents\n    - human_interface:\n        access: read_write\n        purpose: Communication with human supervisors\nteam:\n  members:\n    - researcher:\n        role: Information gathering and analysis\n        capabilities: [\"research\", \"summarization\", \"fact-checking\"]\n    - writer:\n        role: Content creation and editing\n        capabilities: [\"writing\", \"editing\", \"formatting\"]\n    - reviewer:\n        role: Quality control and feedback\n        capabilities: [\"evaluation\", \"critique\", \"improvement suggestions\"]\n</code></pre>"},{"location":"examples/team-collaboration/#research-specialist-agent","title":"Research Specialist Agent","text":"<pre><code>name: research-specialist\ndescription: A specialized research agent that gathers and analyzes information for the project team.\ncapabilities:\n  - Web research and information retrieval\n  - Data analysis and pattern recognition\n  - Fact-checking and source verification\n  - Summarization and knowledge extraction\n  - Trend identification and market analysis\n# Additional configuration omitted for brevity\nteam:\n  role: researcher\n  reports_to: project-manager\n  collaborates_with:\n    - writer\n    - reviewer\n</code></pre>"},{"location":"examples/team-collaboration/#content-writer-agent","title":"Content Writer Agent","text":"<pre><code>name: content-writer\ndescription: A specialized writing agent that creates, edits, and formats content based on research findings.\ncapabilities:\n  - Professional content creation\n  - Editing and proofreading\n  - Formatting and document structure\n  - Style adaptation for different audiences\n  - Visual content suggestions\n# Additional configuration omitted for brevity\nteam:\n  role: writer\n  reports_to: project-manager\n  collaborates_with:\n    - researcher\n    - reviewer\n</code></pre>"},{"location":"examples/team-collaboration/#quality-reviewer-agent","title":"Quality Reviewer Agent","text":"<pre><code>name: quality-reviewer\ndescription: A specialized quality control agent that evaluates content, provides feedback, and ensures high standards.\ncapabilities:\n  - Critical evaluation and analysis\n  - Constructive feedback formulation\n  - Quality standards enforcement\n  - Consistency verification\n  - Improvement recommendations\n# Additional configuration omitted for brevity\nteam:\n  role: reviewer\n  reports_to: project-manager\n  collaborates_with:\n    - researcher\n    - writer\n</code></pre>"},{"location":"examples/team-collaboration/#building-and-running-the-team","title":"Building and Running the Team","text":"<p>Build each agent separately:</p> <pre><code># Build the manager agent\n./bin/sentinel build -t demo/project-manager:v1 -f examples/team-collaboration/manager.Sentinelfile --llm anthropic --llm-model claude-3-sonnet\n\n# Build the researcher agent\n./bin/sentinel build -t demo/research-specialist:v1 -f examples/team-collaboration/researcher.Sentinelfile --llm anthropic --llm-model claude-3-sonnet\n\n# Build the writer agent\n./bin/sentinel build -t demo/content-writer:v1 -f examples/team-collaboration/writer.Sentinelfile --llm anthropic --llm-model claude-3-sonnet\n\n# Build the reviewer agent\n./bin/sentinel build -t demo/quality-reviewer:v1 -f examples/team-collaboration/reviewer.Sentinelfile --llm anthropic --llm-model claude-3-sonnet\n</code></pre> <p>Run the team with:</p> <pre><code># Start the agent network with all four agents\n./bin/sentinel team run --agents demo/project-manager:v1,demo/research-specialist:v1,demo/content-writer:v1,demo/quality-reviewer:v1\n</code></pre>"},{"location":"examples/team-collaboration/#communication-system","title":"Communication System","text":"<p>The agents communicate through a message bus system:</p> <ol> <li>The Project Manager receives tasks from the human user</li> <li>The manager breaks down the task and assigns subtasks to specialists</li> <li>The Research Specialist gathers information and reports back</li> <li>The Content Writer creates content based on the research</li> <li>The Quality Reviewer evaluates the content and provides feedback</li> <li>The writer revises based on feedback</li> <li>The manager consolidates the final output and delivers it to the user</li> </ol>"},{"location":"examples/team-collaboration/#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Creating research reports on complex topics</li> <li>Developing content marketing campaigns</li> <li>Producing technical documentation</li> <li>Analyzing and summarizing large volumes of information</li> <li>Generating multi-perspective analyses of issues</li> </ul>"},{"location":"examples/team-collaboration/#advanced-features","title":"Advanced Features","text":"<p>This example demonstrates several advanced features:</p> <ul> <li>Multi-agent collaboration: Agents working together in a coordinated workflow</li> <li>Hierarchical organization: Manager-subordinate relationship structure</li> <li>Specialized roles: Each agent has a specific function in the overall process</li> <li>Communication channels: Structured message passing between agents</li> <li>Workflow orchestration: Sequential and parallel task execution</li> </ul>"},{"location":"examples/team-collaboration/#customization","title":"Customization","text":"<p>You can customize this team by:</p> <ul> <li>Adding more specialized agents</li> <li>Changing the team structure and reporting lines</li> <li>Adjusting the communication patterns</li> <li>Modifying the workflow processes</li> <li>Specializing the team for particular domains or tasks </li> </ul>"},{"location":"planning/cli_implementation/","title":"Sentinel CLI Implementation Plan","text":"<p>This document outlines the implementation plan for the Sentinel CLI, which is the primary interface for users to interact with the SentinelStacks system.</p>"},{"location":"planning/cli_implementation/#core-architecture","title":"Core Architecture","text":"<p>The CLI will be built using the following structure:</p> <pre><code>sentinel/\n\u251c\u2500\u2500 cmd/            # Command implementations\n\u2502   \u251c\u2500\u2500 build/      # Build command\n\u2502   \u251c\u2500\u2500 run/        # Run command\n\u2502   \u251c\u2500\u2500 push/       # Push command\n\u2502   \u251c\u2500\u2500 pull/       # Pull command\n\u2502   \u2514\u2500\u2500 ...         # Other commands\n\u251c\u2500\u2500 internal/       # Internal packages\n\u2502   \u251c\u2500\u2500 config/     # Configuration management\n\u2502   \u251c\u2500\u2500 parser/     # Sentinelfile parser\n\u2502   \u251c\u2500\u2500 runtime/    # Agent runtime\n\u2502   \u251c\u2500\u2500 registry/   # Registry client\n\u2502   \u2514\u2500\u2500 shim/       # LLM provider abstraction\n\u251c\u2500\u2500 pkg/            # Public packages for extending functionality\n\u2502   \u251c\u2500\u2500 agent/      # Agent definition models\n\u2502   \u251c\u2500\u2500 tools/      # Tool integration framework\n\u2502   \u2514\u2500\u2500 api/        # API client for services\n\u2514\u2500\u2500 main.go         # Entry point\n</code></pre>"},{"location":"planning/cli_implementation/#command-structure","title":"Command Structure","text":"<p>The CLI will support the following commands:</p>"},{"location":"planning/cli_implementation/#basic-commands","title":"Basic Commands","text":"<ul> <li><code>sentinel init</code>: Initialize a new Sentinelfile</li> <li><code>sentinel build</code>: Build a Sentinel Image from a Sentinelfile</li> <li><code>sentinel run</code>: Run a Sentinel Agent from an image</li> <li><code>sentinel ps</code>: List running agents</li> <li><code>sentinel stop</code>: Stop a running agent</li> <li><code>sentinel logs</code>: View logs from a running agent</li> </ul>"},{"location":"planning/cli_implementation/#registry-commands","title":"Registry Commands","text":"<ul> <li><code>sentinel login</code>: Authenticate with a Sentinel Registry</li> <li><code>sentinel logout</code>: Log out from a Sentinel Registry</li> <li><code>sentinel push</code>: Push a Sentinel Image to a registry</li> <li><code>sentinel pull</code>: Pull a Sentinel Image from a registry</li> <li><code>sentinel search</code>: Search for agents in a registry</li> </ul>"},{"location":"planning/cli_implementation/#management-commands","title":"Management Commands","text":"<ul> <li><code>sentinel images</code>: List local Sentinel Images</li> <li><code>sentinel prune</code>: Remove unused images and stopped agents</li> <li><code>sentinel inspect</code>: Display detailed information about an image</li> <li><code>sentinel validate</code>: Validate a Sentinelfile</li> </ul>"},{"location":"planning/cli_implementation/#configuration-commands","title":"Configuration Commands","text":"<ul> <li><code>sentinel config set</code>: Set configuration values</li> <li><code>sentinel config get</code>: Get configuration values</li> <li><code>sentinel config list</code>: List all configuration values</li> </ul>"},{"location":"planning/cli_implementation/#implementation-phases","title":"Implementation Phases","text":""},{"location":"planning/cli_implementation/#phase-1-core-framework-weeks-1-2","title":"Phase 1: Core Framework (Weeks 1-2)","text":"<ol> <li>Set up the basic CLI structure using Cobra</li> <li>Create command placeholders</li> <li>Implement configuration management</li> <li>Add logging and error handling</li> </ol>"},{"location":"planning/cli_implementation/#phase-2-sentinelfile-building-weeks-3-4","title":"Phase 2: Sentinelfile &amp; Building (Weeks 3-4)","text":"<ol> <li>Implement basic Sentinelfile parser</li> <li>Create agent definition model</li> <li>Build the <code>init</code> command with templates</li> <li>Implement the <code>build</code> command for local images</li> </ol>"},{"location":"planning/cli_implementation/#phase-3-runtime-weeks-5-6","title":"Phase 3: Runtime (Weeks 5-6)","text":"<ol> <li>Develop the agent runtime</li> <li>Implement the <code>run</code> command</li> <li>Add state management (basic)</li> <li>Create process management for agents</li> </ol>"},{"location":"planning/cli_implementation/#phase-4-registry-weeks-7-8","title":"Phase 4: Registry (Weeks 7-8)","text":"<ol> <li>Design registry API communication</li> <li>Implement authentication</li> <li>Build push/pull functionality</li> <li>Add registry search</li> </ol>"},{"location":"planning/cli_implementation/#phase-5-management-monitoring-weeks-9-10","title":"Phase 5: Management &amp; Monitoring (Weeks 9-10)","text":"<ol> <li>Implement logging system</li> <li>Add agent monitoring</li> <li>Create inspection and validation tools</li> <li>Build prune and cleanup functionality</li> </ol>"},{"location":"planning/cli_implementation/#cli-design-principles","title":"CLI Design Principles","text":"<ol> <li>Consistent Patterns: Follow Docker's command patterns for familiarity</li> <li>Progressive Disclosure: Basic commands should be simple, with advanced options available</li> <li>Helpful Errors: Provide clear error messages with suggestions for resolution</li> <li>Fast Startup: Minimize initial load time for the CLI</li> <li>Extensibility: Allow for plugins and extensions</li> </ol>"},{"location":"planning/cli_implementation/#code-examples","title":"Code Examples","text":""},{"location":"planning/cli_implementation/#main-entry-point","title":"Main Entry Point","text":"<pre><code>// main.go\npackage main\n\nimport (\n    \"os\"\n\n    \"github.com/sentinelstacks/cli/cmd\"\n)\n\nfunc main() {\n    if err := cmd.RootCmd.Execute(); err != nil {\n        os.Exit(1)\n    }\n}\n</code></pre>"},{"location":"planning/cli_implementation/#root-command","title":"Root Command","text":"<pre><code>// cmd/root.go\npackage cmd\n\nimport (\n    \"github.com/spf13/cobra\"\n)\n\nvar RootCmd = &amp;cobra.Command{\n    Use:   \"sentinel\",\n    Short: \"SentinelStacks - Agent Management System\",\n    Long: `SentinelStacks is a complete system for creating, managing,\nand distributing AI agents using natural language definitions.`,\n}\n\nfunc init() {\n    // Add global flags\n    RootCmd.PersistentFlags().BoolP(\"verbose\", \"v\", false, \"Enable verbose output\")\n\n    // Add commands\n    RootCmd.AddCommand(buildCmd)\n    RootCmd.AddCommand(runCmd)\n    RootCmd.AddCommand(pushCmd)\n    RootCmd.AddCommand(pullCmd)\n    // Add other commands...\n}\n</code></pre>"},{"location":"planning/cli_implementation/#build-command","title":"Build Command","text":"<pre><code>// cmd/build.go\npackage cmd\n\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/sentinelstacks/cli/internal/parser\"\n    \"github.com/sentinelstacks/cli/internal/builder\"\n)\n\nvar buildCmd = &amp;cobra.Command{\n    Use:   \"build [options] -t name:tag\",\n    Short: \"Build a Sentinel Image from a Sentinelfile\",\n    RunE: func(cmd *cobra.Command, args []string) error {\n        // Parse flags\n        tag, _ := cmd.Flags().GetString(\"tag\")\n        file, _ := cmd.Flags().GetString(\"file\")\n\n        // Process Sentinelfile\n        parser := parser.NewSentinelfileParser()\n        def, err := parser.ParseFile(file)\n        if err != nil {\n            return err\n        }\n\n        // Build image\n        builder := builder.NewImageBuilder()\n        return builder.Build(def, tag)\n    },\n}\n\nfunc init() {\n    buildCmd.Flags().StringP(\"tag\", \"t\", \"\", \"Name and optionally a tag in the 'name:tag' format\")\n    buildCmd.Flags().StringP(\"file\", \"f\", \"Sentinelfile\", \"Path to Sentinelfile\")\n    buildCmd.MarkFlagRequired(\"tag\")\n}\n</code></pre>"},{"location":"planning/cli_implementation/#testing-strategy","title":"Testing Strategy","text":"<ol> <li>Unit Tests: For parsing, building, and internal functions</li> <li>Integration Tests: For command execution and API communication</li> <li>End-to-End Tests: For complete workflows</li> <li>Mocks: For LLM API and registry communication</li> </ol>"},{"location":"planning/cli_implementation/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Cache parsed Sentinelfiles when appropriate</li> <li>Use efficient serialization for agent definitions</li> <li>Implement parallel operations where possible</li> <li>Minimize API calls to LLM providers</li> </ol>"},{"location":"planning/multimodal_implementation/","title":"Multimodal Support Implementation Plan","text":""},{"location":"planning/multimodal_implementation/#overview","title":"Overview","text":"<p>This document outlines the implementation plan for adding multimodal support to SentinelStacks, enabling agents to process and generate not just text but also images, audio, and video content.</p>"},{"location":"planning/multimodal_implementation/#architecture-changes","title":"Architecture Changes","text":""},{"location":"planning/multimodal_implementation/#1-multimodal-types-package","title":"1. Multimodal Types Package","text":"<p>We've created a new package <code>internal/multimodal</code> that defines the core types:</p> <ul> <li><code>MediaType</code> - Enum for different media types (text, image, audio, video)</li> <li><code>Content</code> - Struct to represent multimodal content with fields for type, data, MIME type, etc.</li> <li><code>Input</code> - Container for multimodal inputs with methods to add text and image content</li> <li><code>Output</code> - Container for multimodal outputs with methods to retrieve text and images</li> <li><code>Chunk</code> - For streaming responses</li> <li><code>ContentReader</code> - Interface for reading multimodal content</li> </ul>"},{"location":"planning/multimodal_implementation/#2-updated-provider-interface","title":"2. Updated Provider Interface","text":"<p>The LLM provider interface has been expanded to include multimodal capabilities:</p> <pre><code>type Provider interface {\n    // Existing methods...\n\n    // Multimodal methods\n    SupportsMultimodal() bool\n    GenerateMultimodalResponse(ctx context.Context, input *multimodal.Input, params map[string]interface{}) (*multimodal.Output, error)\n    StreamMultimodalResponse(ctx context.Context, input *multimodal.Input, params map[string]interface{}) (&lt;-chan *multimodal.Chunk, error)\n}\n</code></pre>"},{"location":"planning/multimodal_implementation/#3-shim-interface-updates","title":"3. Shim Interface Updates","text":"<p>The shim interface has been expanded to include:</p> <pre><code>type Shim interface {\n    // Existing methods...\n\n    // Multimodal methods\n    SupportsMultimodal() bool\n    GenerateMultimodal(ctx context.Context, input *multimodal.Input) (*multimodal.Output, error)\n    StreamMultimodal(ctx context.Context, input *multimodal.Input) (&lt;-chan *multimodal.Chunk, error)\n}\n</code></pre>"},{"location":"planning/multimodal_implementation/#provider-implementations","title":"Provider Implementations","text":""},{"location":"planning/multimodal_implementation/#claude-provider","title":"Claude Provider","text":"<p>Claude 3 models have strong multimodal capabilities. Implementation includes:</p> <ul> <li>Added <code>SupportsMultimodal()</code> method returning <code>true</code></li> <li>Implemented <code>GenerateMultimodalResponse</code> and <code>StreamMultimodalResponse</code> methods</li> <li>Support for image inputs and text outputs</li> </ul>"},{"location":"planning/multimodal_implementation/#openai-provider-planned","title":"OpenAI Provider (Planned)","text":"<p>Future implementation for OpenAI models (GPT-4 Vision):</p> <ul> <li>Will support image inputs and text outputs</li> <li>Will handle DALL-E 3 for image generation</li> </ul>"},{"location":"planning/multimodal_implementation/#ollama-provider-planned","title":"Ollama Provider (Planned)","text":"<ul> <li>Multimodal support for models like LLaVA that support image inputs</li> <li>Implementation will depend on Ollama's API for multimodal capabilities</li> </ul>"},{"location":"planning/multimodal_implementation/#cli-enhancements","title":"CLI Enhancements","text":""},{"location":"planning/multimodal_implementation/#new-commands","title":"New Commands","text":"<ul> <li><code>sentinel mm generate</code> - Generate a response using multimodal input</li> <li><code>sentinel mm stream</code> - Stream a response using multimodal input</li> </ul>"},{"location":"planning/multimodal_implementation/#flags","title":"Flags","text":"<ul> <li><code>--image</code> - Path to one or more image files to include</li> <li><code>--audio</code> - Path to an audio file to include</li> <li><code>--video</code> - Path to a video file to include</li> <li><code>--output-dir</code> - Directory to save generated media outputs</li> </ul>"},{"location":"planning/multimodal_implementation/#sentinelfile-additions","title":"Sentinelfile Additions","text":"<p>New sections in the Sentinelfile for multimodal capabilities:</p> <pre><code>multimodal:\n  input_types:\n    - text\n    - image\n  output_types:\n    - text\n    - image\n  max_image_size: 4MB\n  image_formats:\n    - png\n    - jpeg\n</code></pre>"},{"location":"planning/multimodal_implementation/#testing-strategy","title":"Testing Strategy","text":"<ol> <li>Unit tests for the multimodal types and functions</li> <li>Integration tests with mock LLM providers</li> <li>Full end-to-end tests with actual providers (Claude, OpenAI)</li> <li>Performance testing with different media sizes and types</li> </ol>"},{"location":"planning/multimodal_implementation/#implementation-timeline","title":"Implementation Timeline","text":"Phase Task Status ETA 1 Core multimodal types Completed - 1 Shim interface updates Completed - 2 Claude provider implementation In Progress 2 weeks 2 CLI enhancements Not Started 3 weeks 3 OpenAI provider implementation Not Started 4 weeks 3 Ollama provider implementation Not Started 5 weeks 4 Documentation and examples Not Started 6 weeks"},{"location":"planning/multimodal_implementation/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Support for audio processing and generation</li> <li>Support for video processing and generation</li> <li>Vision-based agents that can analyze complex images</li> <li>Multi-turn multimodal conversations</li> <li>Agent-generated visual content (charts, diagrams, etc.)</li> <li>Multimodal state management for agents</li> </ul>"},{"location":"planning/multimodal_implementation/#challenges-and-considerations","title":"Challenges and Considerations","text":"<ul> <li>Performance: Handling large media files efficiently</li> <li>Security: Ensuring safe processing of user-provided media</li> <li>Compatibility: Supporting different provider capabilities</li> <li>Cost: Managing token/API costs for multimodal interactions</li> <li>Streaming: Implementing efficient streaming for larger outputs</li> </ul>"},{"location":"planning/multimodal_implementation/#conclusion","title":"Conclusion","text":"<p>Multimodal support represents a significant enhancement to SentinelStacks' capabilities, allowing developers to create more versatile and powerful agents. The implementation follows a phased approach, starting with the core types and interfaces, followed by provider-specific implementations and CLI enhancements. </p>"},{"location":"planning/multimodal_support/","title":"Multimodal Support Implementation Plan","text":"<p>This document outlines the plan for adding multimodal capabilities to SentinelStacks, allowing agents to process and generate various media types including images, audio, and potentially video in the future.</p>"},{"location":"planning/multimodal_support/#overview","title":"Overview","text":"<p>Multimodal support will enable SentinelStacks agents to:</p> <ol> <li>Process images alongside text</li> <li>Generate or modify images</li> <li>Understand visual content and respond based on it</li> <li>Interact through rich media interfaces</li> </ol>"},{"location":"planning/multimodal_support/#implementation-phases","title":"Implementation Phases","text":""},{"location":"planning/multimodal_support/#phase-1-core-framework-current","title":"Phase 1: Core Framework (Current)","text":"<ul> <li>[x] Define core multimodal data structures</li> <li>[ ] Implement media content handling utilities</li> <li>[ ] Create provider interface extensions</li> <li>[ ] Add test fixtures and unit tests</li> </ul>"},{"location":"planning/multimodal_support/#phase-2-provider-integration","title":"Phase 2: Provider Integration","text":"<ul> <li>[ ] Implement Claude provider multimodal support</li> <li>[ ] Add OpenAI provider multimodal capabilities</li> <li>[ ] Create testing tools for multimodal agents</li> </ul>"},{"location":"planning/multimodal_support/#phase-3-cli-and-user-experience","title":"Phase 3: CLI and User Experience","text":"<ul> <li>[ ] Extend Sentinelfile format for multimodal definitions</li> <li>[ ] Implement CLI commands for multimodal interaction</li> <li>[ ] Add documentation and examples</li> </ul>"},{"location":"planning/multimodal_support/#phase-4-advanced-features","title":"Phase 4: Advanced Features","text":"<ul> <li>[ ] Image preprocessing capabilities</li> <li>[ ] Document analysis</li> <li>[ ] Performance optimization for large media files</li> </ul>"},{"location":"planning/multimodal_support/#technical-details","title":"Technical Details","text":""},{"location":"planning/multimodal_support/#core-types-implemented","title":"Core Types (Implemented)","text":"<p>The multimodal package defines several key types:</p> <pre><code>// MediaType represents the type of media content\ntype MediaType string\n\n// Media type constants\nconst (\n    MediaTypeText  MediaType = \"text\"\n    MediaTypeImage MediaType = \"image\"\n    MediaTypeAudio MediaType = \"audio\"\n    MediaTypeVideo MediaType = \"video\"\n)\n\n// Content represents a piece of multimodal content\ntype Content struct {\n    Type     MediaType              `json:\"type\"`\n    Data     []byte                 `json:\"-\"` // Raw binary data\n    MimeType string                 `json:\"mime_type,omitempty\"`\n    Text     string                 `json:\"text,omitempty\"`\n    URL      string                 `json:\"url,omitempty\"`\n    Metadata map[string]interface{} `json:\"metadata,omitempty\"`\n}\n\n// Input represents a multimodal input for generation\ntype Input struct {\n    Contents    []*Content              `json:\"contents\"`\n    MaxTokens   int                     `json:\"max_tokens,omitempty\"`\n    Temperature float64                 `json:\"temperature,omitempty\"`\n    Stream      bool                    `json:\"stream,omitempty\"`\n    Metadata    map[string]interface{}  `json:\"metadata,omitempty\"`\n}\n\n// Output represents a multimodal output from generation\ntype Output struct {\n    Contents   []*Content              `json:\"contents\"`\n    UsedTokens int                     `json:\"used_tokens,omitempty\"`\n    Metadata   map[string]interface{}  `json:\"metadata,omitempty\"`\n}\n</code></pre>"},{"location":"planning/multimodal_support/#provider-interface-extensions","title":"Provider Interface Extensions","text":"<p>The shim interface has been extended to support multimodal capabilities:</p> <pre><code>// Multimodal support methods in the Shim interface\nGenerateMultimodal(ctx context.Context, input *multimodal.Input) (*multimodal.Output, error)\nStreamMultimodal(ctx context.Context, input *multimodal.Input) (&lt;-chan *multimodal.Chunk, error)\nSupportsMultimodal() bool\n</code></pre>"},{"location":"planning/multimodal_support/#sentinelfile-extensions-planned","title":"Sentinelfile Extensions (Planned)","text":"<p>Sentinelfiles will be extended to support multimodal capabilities:</p> <pre><code>name: VisualAnalysisAgent\ndescription: An agent that analyzes images and provides insights\nbaseModel: claude-3-opus-20240229\nmultimodal:\n  enabled: true\n  supportedMediaTypes:\n    - image/jpeg\n    - image/png\n    - image/gif\n  maxImageSize: 5MB\n  imageAnalysisCapabilities:\n    - objectDetection\n    - textRecognition\n    - sceneClassification\n</code></pre>"},{"location":"planning/multimodal_support/#cli-command-extensions-planned","title":"CLI Command Extensions (Planned)","text":"<p>The CLI will be extended with commands to handle multimodal interaction:</p> <pre><code>sentinel run --image path/to/image.jpg --prompt \"Analyze this image\"\nsentinel run --input multimodal_input.json\n</code></pre>"},{"location":"planning/multimodal_support/#provider-specific-implementation","title":"Provider-Specific Implementation","text":""},{"location":"planning/multimodal_support/#claude-provider","title":"Claude Provider","text":"<p>Claude 3 models support multimodal inputs natively. The implementation will:</p> <ol> <li>Convert SentinelStacks multimodal content to Anthropic API format</li> <li>Handle API responses and convert them back to SentinelStacks format</li> <li>Support both synchronous and streaming responses</li> </ol> <p>Example API request format:</p> <pre><code>{\n  \"model\": \"claude-3-opus-20240229\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What's in this image?\"\n        },\n        {\n          \"type\": \"image\",\n          \"source\": {\n            \"type\": \"base64\",\n            \"media_type\": \"image/jpeg\",\n            \"data\": \"...\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 1024\n}\n</code></pre>"},{"location":"planning/multimodal_support/#openai-provider","title":"OpenAI Provider","text":"<p>OpenAI's GPT-4V supports multimodal inputs. The implementation will:</p> <ol> <li>Convert SentinelStacks multimodal content to OpenAI API format</li> <li>Handle API responses and convert them back to SentinelStacks format</li> <li>Support both synchronous and streaming responses</li> </ol> <p>Example API request format:</p> <pre><code>{\n  \"model\": \"gpt-4-vision-preview\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What's in this image?\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"data:image/jpeg;base64,...\"\n          }\n        }\n      ]\n    }\n  ],\n  \"max_tokens\": 1024\n}\n</code></pre>"},{"location":"planning/multimodal_support/#example-use-cases","title":"Example Use Cases","text":""},{"location":"planning/multimodal_support/#visual-analysis-agent","title":"Visual Analysis Agent","text":"<pre><code>name: VisualAnalyzer\ndescription: An agent that analyzes images and provides detailed descriptions\nbaseModel: claude-3-opus-20240229\nmultimodal:\n  enabled: true\n  supportedMediaTypes:\n    - image/jpeg\n    - image/png\n  maxImageSize: 5MB\n</code></pre>"},{"location":"planning/multimodal_support/#design-assistant","title":"Design Assistant","text":"<pre><code>name: DesignAssistant\ndescription: An agent that helps with design tasks and can generate mockups\nbaseModel: gpt-4-vision-preview\nmultimodal:\n  enabled: true\n  supportedMediaTypes:\n    - image/jpeg\n    - image/png\n    - image/svg+xml\n  maxImageSize: 10MB\n  generationCapabilities:\n    - mockups\n    - iconDesign\n    - uiSuggestions\n</code></pre>"},{"location":"planning/multimodal_support/#next-steps","title":"Next Steps","text":"<ol> <li>Complete the core multimodal implementation</li> <li>Implement Claude provider integration</li> <li>Add OpenAI provider support</li> <li>Extend CLI for multimodal interaction</li> <li>Create documentation and examples</li> <li>Test with real-world use cases</li> </ol>"},{"location":"planning/multimodal_support/#risks-and-mitigations","title":"Risks and Mitigations","text":"Risk Mitigation Large media files impacting performance Implement automatic resizing and compression API costs for multimodal models Add usage tracking and limits Provider API changes Abstract provider implementations behind stable interfaces Security concerns with media content Add content scanning and validation"},{"location":"planning/multimodal_support/#conclusion","title":"Conclusion","text":"<p>Multimodal support will significantly enhance the capabilities of SentinelStacks agents, allowing them to interact with and understand visual content alongside text. The implementation plan outlined here provides a structured approach to adding these capabilities while maintaining compatibility with existing systems. </p>"},{"location":"planning/progress_tracker/","title":"SentinelStacks Progress Tracker","text":"<p>This document serves as a real-time tracker for project progress against the roadmap.</p>"},{"location":"planning/progress_tracker/#phase-1-foundation","title":"Phase 1: Foundation","text":"Component Status Progress Last Updated Notes Project Setup Completed 100% 2024-03-31 Initial project structure created Core Interfaces In Progress 60% 2024-03-31 Basic interfaces defined CLI Framework Completed 100% 2024-03-31 Core CLI commands implemented Sentinelfile Parser In Progress 75% 2024-04-01 Basic parser implemented, advanced features added Agent Runtime In Progress 40% 2024-04-01 Basic simulation implemented, chatbot example added Local Registry In Progress 40% 2024-03-31 Basic storage implemented LLM Integration In Progress 70% 2024-04-01 Claude and Ollama shims implemented, advanced model parameters added Examples &amp; Demos In Progress 80% 2024-04-01 Chatbot, research assistant, team collaboration, and finance advisor examples implemented CI/CD Setup Completed 100% 2024-04-01 GitHub Actions workflows added Git Workflow Completed 100% 2024-04-01 Branching strategy, PR template, and release process defined Multi-Agent Framework In Progress 40% 2024-04-01 Initial design for team-based agents implemented Compliance Controls In Progress 30% 2024-04-01 Initial design for regulatory compliance implemented Advanced Agent Design In Progress 60% 2024-04-01 Comprehensive guide for advanced agent architecture created"},{"location":"planning/progress_tracker/#key-metrics","title":"Key Metrics","text":"Metric Target Current Status Test Coverage 80% 20% \u26a0\ufe0f Lint Errors 0 0 \u2705 Documentation Coverage 90% 85% \u2705 Build Success Rate 100% 100% \u2705"},{"location":"planning/progress_tracker/#current-sprint-focus","title":"Current Sprint Focus","text":"<p>Sprint 1: Core CLI and LLM Integration</p> Task Owner Status Due Date Repository setup Completed 2024-03-31 Dev environment configuration Completed 2024-03-31 Core interface definition Completed 2024-03-31 Basic CLI implementation Completed 2024-03-31 Ollama integration Completed 2024-03-31 Claude integration Completed 2024-04-01 Documentation setup Completed 2024-03-31 CI/CD pipeline Completed 2024-04-01 Docker containerization Completed 2024-04-01 Example agents Completed 2024-04-01 Git workflow strategy Completed 2024-04-01 Multi-agent collaboration In Progress 2024-04-07 Regulatory compliance features In Progress 2024-04-07 Advanced agent documentation Completed 2024-04-01"},{"location":"planning/progress_tracker/#upcoming-milestones","title":"Upcoming Milestones","text":"Milestone Target Date Status Progress Initial CLI functionality 2024-03-31 Completed 100% First agent definition parsing 2024-04-07 In Progress 75% Example agents library 2024-04-14 Completed 100% Local registry implementation 2024-04-14 In Progress 40% Multi-agent orchestration 2024-04-21 In Progress 40% Regulatory compliance 2024-04-21 In Progress 30% Advanced agent capabilities 2024-04-21 In Progress 60% MVP release 2024-04-30 Not Started 50%"},{"location":"planning/progress_tracker/#recently-completed","title":"Recently Completed","text":"Task Completion Date Notes Project initialization 2024-03-31 Basic structure and commands CLI core commands 2024-03-31 init, build, run, config Ollama integration 2024-03-31 Basic shim implementation for Llama 3 Claude integration 2024-04-01 Integration with Claude 3 models GitHub Actions setup 2024-04-01 CI/CD pipeline for tests, builds, and docs MkDocs setup 2024-03-31 Documentation structure and GitHub Pages Basic chatbot example 2024-04-01 First example agent using Llama 3 Research assistant example 2024-04-01 Advanced example using Claude 3 Opus Team collaboration example 2024-04-01 Multi-agent system with specialized roles Finance advisor example 2024-04-01 Example with compliance controls and data sources Advanced agent guide 2024-04-01 Comprehensive documentation for advanced agent design Docker configuration 2024-04-01 Multi-stage build with Alpine base Git workflow and PR templates 2024-04-01 Clear contribution guidelines and release process"},{"location":"planning/progress_tracker/#blockers-risks","title":"Blockers &amp; Risks","text":"Issue Impact Mitigation Owner Status LLM API access for CI/CD Tests might fail in CI Mock LLM responses for tests In Progress Ollama API compatibility Might break with Ollama updates Add version detection and robust error handling Not Started Multi-agent communication Could have race conditions Design robust message passing system Not Started Regulatory compliance Different requirements by region Implement configurable compliance frameworks Not Started Advanced agent complexity Learning curve for users Provide clear documentation and examples Completed <p>Last updated: 2024-04-01</p>"},{"location":"planning/roadmap/","title":"SentinelStacks Development Roadmap","text":"<p>This document outlines the planned development roadmap for SentinelStacks through 2024 and beyond. It provides a high-level view of major milestones, features, and enhancements we aim to implement.</p>"},{"location":"planning/roadmap/#phase-1-foundation-q1-q2-2024","title":"Phase 1: Foundation (Q1-Q2 2024)","text":"<p>Focus: Core system architecture and basic functionality</p> <ul> <li>[x] Core CLI Implementation</li> <li>[x] Basic Sentinelfile Parser</li> <li>[x] Claude LLM Integration</li> <li>[x] Ollama LLM Integration</li> <li>[x] Local Agent Registry</li> <li>[x] Basic Agent Runtime</li> <li>[x] CI/CD Pipeline</li> <li>[x] Example Agents Library</li> <li>[x] Basic Documentation</li> <li>[x] Git Workflow and Contribution Guidelines</li> <li>[ ] Initial Test Suite</li> <li>[ ] Demo Deployment</li> </ul> <p>Milestone: MVP Release (April 2024)</p>"},{"location":"planning/roadmap/#phase-2-enhancement-q2-q3-2024","title":"Phase 2: Enhancement (Q2-Q3 2024)","text":"<p>Focus: Improving capabilities, stability, and extensibility</p>"},{"location":"planning/roadmap/#platform-enhancements","title":"Platform Enhancements","text":"<ul> <li>[ ] OpenAI LLM Integration</li> <li>[ ] Open Source LLM Support (Llama 3, Mistral, etc.)</li> <li>[ ] Enhanced Agent State Management</li> <li>[ ] Tool Integration Framework</li> <li>[ ] Web UI for Agent Management</li> <li>[ ] Agent Versioning and Rollback</li> <li>[ ] Configuration Profiles</li> <li>[ ] Improved Logging and Debugging</li> <li>[ ] Enhanced Testing Framework</li> </ul>"},{"location":"planning/roadmap/#multi-agent-features","title":"Multi-Agent Features","text":"<ul> <li>[ ] Agent Communication Protocol</li> <li>[ ] Multi-Agent Orchestration</li> <li>[ ] Agent Event System</li> <li>[ ] Team-Based Workflows</li> <li>[ ] Agent Supervision Models</li> <li>[ ] Memory and Knowledge Sharing</li> </ul>"},{"location":"planning/roadmap/#documentation-and-examples","title":"Documentation and Examples","text":"<ul> <li>[ ] Comprehensive API Docs</li> <li>[ ] Deployment Guides</li> <li>[ ] Video Tutorials</li> <li>[ ] Expanded Example Library</li> <li>[ ] Best Practices Guide</li> </ul> <p>Milestone: Production-Ready Release (August 2024)</p>"},{"location":"planning/roadmap/#phase-3-scale-q3-q4-2024","title":"Phase 3: Scale (Q3-Q4 2024)","text":"<p>Focus: Scaling, distribution, and ecosystem growth</p>"},{"location":"planning/roadmap/#deployment-and-distribution","title":"Deployment and Distribution","text":"<ul> <li>[ ] Cloud Deployment Templates (AWS, GCP, Azure)</li> <li>[ ] Docker Compose and Kubernetes Manifests</li> <li>[ ] Public Registry Service</li> <li>[ ] Private Registry Options</li> <li>[ ] Multi-Node Deployment</li> <li>[ ] High Availability Configuration</li> </ul>"},{"location":"planning/roadmap/#security-and-compliance","title":"Security and Compliance","text":"<ul> <li>[ ] Enhanced Authentication and Authorization</li> <li>[ ] Role-Based Access Control</li> <li>[ ] Audit Logging</li> <li>[ ] Regulatory Compliance Frameworks</li> <li>[ ] Data Privacy Controls</li> <li>[ ] Agent Sandboxing</li> </ul>"},{"location":"planning/roadmap/#community-and-ecosystem","title":"Community and Ecosystem","text":"<ul> <li>[ ] Agent Marketplace</li> <li>[ ] Plugin System</li> <li>[ ] Community Templates</li> <li>[ ] Integration Partners</li> <li>[ ] Developer Documentation</li> <li>[ ] Community Contribution Program</li> </ul> <p>Milestone: Enterprise Release (December 2024)</p>"},{"location":"planning/roadmap/#phase-4-innovation-2025","title":"Phase 4: Innovation (2025)","text":"<p>Focus: Next-generation features and advanced capabilities</p>"},{"location":"planning/roadmap/#advanced-features","title":"Advanced Features","text":"<ul> <li>[ ] Agent Learning and Adaptation</li> <li>[ ] Fine-Tuning Integration</li> <li>[ ] Advanced Reasoning Frameworks</li> <li>[ ] Complex Multi-Agent Organizations</li> <li>[ ] Autonomous Agent Operations</li> <li>[ ] Simulation Environments</li> </ul>"},{"location":"planning/roadmap/#integration-ecosystem","title":"Integration Ecosystem","text":"<ul> <li>[ ] API Gateway</li> <li>[ ] Webhook System</li> <li>[ ] Third-Party Service Integrations</li> <li>[ ] Database Connectors</li> <li>[ ] AI Service Marketplace</li> <li>[ ] ETL Pipelines</li> </ul>"},{"location":"planning/roadmap/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>[ ] Single Sign-On Integration</li> <li>[ ] Enterprise SLAs</li> <li>[ ] Compliance Reporting</li> <li>[ ] Resource Optimization</li> <li>[ ] Advanced Monitoring</li> <li>[ ] Cost Management Tools</li> </ul> <p>Milestone: Enterprise-Plus Release (Q2 2025)</p>"},{"location":"planning/roadmap/#ongoing-initiatives","title":"Ongoing Initiatives","text":""},{"location":"planning/roadmap/#performance-and-optimization","title":"Performance and Optimization","text":"<ul> <li>Continuous performance improvements</li> <li>Latency reduction strategies</li> <li>Resource utilization optimization</li> <li>Scalability enhancements</li> <li>Caching mechanisms</li> </ul>"},{"location":"planning/roadmap/#security","title":"Security","text":"<ul> <li>Regular security audits</li> <li>Dependency monitoring</li> <li>Vulnerability assessments</li> <li>Security best practices documentation</li> <li>Response protocols</li> </ul>"},{"location":"planning/roadmap/#community-engagement","title":"Community Engagement","text":"<ul> <li>Documentation improvements</li> <li>Community support</li> <li>Regular contributor meetings</li> <li>Public roadmap updates</li> <li>User feedback integration</li> </ul>"},{"location":"planning/roadmap/#feature-requests-and-prioritization","title":"Feature Requests and Prioritization","text":"<p>We welcome feature requests and suggestions from the community. Please submit them as GitHub issues with the \"feature request\" label. </p> <p>Our prioritization process considers: - Community demand - Strategic alignment - Technical feasibility - Resource requirements - Dependency constraints</p>"},{"location":"planning/roadmap/#contributing","title":"Contributing","text":"<p>If you're interested in contributing to the roadmap's implementation, please see our CONTRIBUTING.md guide for details on how to get involved.</p> <p>Note: This roadmap is a living document and may change based on user feedback, technological developments, and strategic priorities. Last updated: April 1, 2024.</p>"},{"location":"planning/shim_implementation/","title":"Sentinel Shim Implementation Plan","text":"<p>This document details the implementation plan for the Sentinel Shim component, which provides abstraction between different LLM providers and the SentinelStacks runtime.</p>"},{"location":"planning/shim_implementation/#overview","title":"Overview","text":"<p>The Sentinel Shim is a critical component that enables agent portability across different LLM providers. It abstracts away provider-specific details, standardizes interactions, and optimizes prompts for each provider.</p>"},{"location":"planning/shim_implementation/#architecture","title":"Architecture","text":""},{"location":"planning/shim_implementation/#component-structure","title":"Component Structure","text":"<pre><code>sentinel/\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 shim/                  # Shim package\n\u2502   \u2502   \u251c\u2500\u2500 shim.go            # Core interface definitions\n\u2502   \u2502   \u251c\u2500\u2500 provider.go        # Provider interface\n\u2502   \u2502   \u251c\u2500\u2500 context.go         # Context management\n\u2502   \u2502   \u251c\u2500\u2500 prompt.go          # Prompt engineering\n\u2502   \u2502   \u251c\u2500\u2500 cache.go           # Response caching\n\u2502   \u2502   \u251c\u2500\u2500 utils.go           # Utility functions\n\u2502   \u2502   \u251c\u2500\u2500 config.go          # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 providers/         # Provider implementations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 claude.go      # Claude provider\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 openai.go      # OpenAI provider\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 llama.go       # Llama provider\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 custom.go      # Custom provider\n\u2502   \u2502   \u251c\u2500\u2500 formatters/        # Format converters\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 json.go        # JSON formatter\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 text.go        # Plain text formatter\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 markdown.go    # Markdown formatter\n\u2502   \u2502   \u2514\u2500\u2500 tools/             # Tool integrations\n\u2502   \u2502       \u251c\u2500\u2500 registry.go    # Tool registry\n\u2502   \u2502       \u251c\u2500\u2500 web.go         # Web tools\n\u2502   \u2502       \u2514\u2500\u2500 data.go        # Data tools\n</code></pre>"},{"location":"planning/shim_implementation/#core-interfaces","title":"Core Interfaces","text":"<pre><code>// Shim is the main interface for interacting with LLM providers\ntype Shim interface {\n    // Initialize the shim with configuration\n    Initialize(config Config) error\n\n    // Generate a response from the LLM\n    Generate(ctx context.Context, input GenerateInput) (*GenerateOutput, error)\n\n    // Stream a response from the LLM\n    Stream(ctx context.Context, input GenerateInput) (&lt;-chan StreamChunk, error)\n\n    // Get embeddings for text\n    GetEmbeddings(ctx context.Context, input EmbeddingsInput) (*EmbeddingsOutput, error)\n\n    // Close and clean up resources\n    Close() error\n}\n\n// Provider is the interface implemented by specific LLM providers\ntype Provider interface {\n    // Name of the provider\n    Name() string\n\n    // Available models from this provider\n    AvailableModels() []string\n\n    // Generate a response (provider-specific)\n    GenerateResponse(ctx context.Context, prompt string, params ProviderParams) (string, error)\n\n    // Stream a response (provider-specific)\n    StreamResponse(ctx context.Context, prompt string, params ProviderParams) (&lt;-chan string, error)\n\n    // Get embeddings (provider-specific)\n    GetEmbeddings(ctx context.Context, text []string) ([][]float32, error)\n}\n</code></pre>"},{"location":"planning/shim_implementation/#implementation-phases","title":"Implementation Phases","text":""},{"location":"planning/shim_implementation/#phase-1-core-framework-weeks-1-2","title":"Phase 1: Core Framework (Weeks 1-2)","text":"<ol> <li>Define core interfaces and data structures</li> <li>Implement basic configuration management</li> <li>Create provider registration mechanism</li> <li>Build prompt handling utilities</li> <li>Set up error handling and logging</li> </ol> <pre><code>// Example core shim implementation\ntype CoreShim struct {\n    config      Config\n    providers   map[string]Provider\n    activeModel string\n    activeProvider Provider\n    cache       Cache\n}\n\nfunc NewShim() Shim {\n    return &amp;CoreShim{\n        providers: make(map[string]Provider),\n    }\n}\n\nfunc (s *CoreShim) Initialize(config Config) error {\n    s.config = config\n\n    // Register built-in providers\n    if err := s.registerBuiltinProviders(); err != nil {\n        return err\n    }\n\n    // Set active provider based on config\n    provider, ok := s.providers[s.config.Provider]\n    if !ok {\n        return fmt.Errorf(\"provider not found: %s\", s.config.Provider)\n    }\n\n    s.activeProvider = provider\n    s.activeModel = s.config.Model\n\n    // Initialize cache if enabled\n    if s.config.CacheEnabled {\n        s.cache = NewCache(s.config.CacheSize)\n    }\n\n    return nil\n}\n\nfunc (s *CoreShim) registerBuiltinProviders() error {\n    // Register Claude provider\n    claudeProvider := providers.NewClaudeProvider()\n    s.providers[claudeProvider.Name()] = claudeProvider\n\n    // Register OpenAI provider\n    openaiProvider := providers.NewOpenAIProvider()\n    s.providers[openaiProvider.Name()] = openaiProvider\n\n    // Register additional providers\n    // ...\n\n    return nil\n}\n</code></pre>"},{"location":"planning/shim_implementation/#phase-2-provider-implementations-weeks-3-4","title":"Phase 2: Provider Implementations (Weeks 3-4)","text":"<ol> <li>Implement Claude provider</li> <li>Implement OpenAI provider</li> <li>Implement Llama provider</li> <li>Create provider-specific parameter mapping</li> <li>Add fallback mechanisms</li> </ol> <pre><code>// Example Claude provider implementation\ntype ClaudeProvider struct {\n    client      *anthropic.Client\n    modelMap    map[string]string\n}\n\nfunc NewClaudeProvider() Provider {\n    return &amp;ClaudeProvider{\n        modelMap: map[string]string{\n            \"claude-3.7-sonnet\": \"claude-3-sonnet-20240229\",\n            \"claude-3-opus\": \"claude-3-opus-20240229\",\n            \"claude-3.5-haiku\": \"claude-3-haiku-20240307\",\n            // Add other model mappings\n        },\n    }\n}\n\nfunc (p *ClaudeProvider) Name() string {\n    return \"claude\"\n}\n\nfunc (p *ClaudeProvider) AvailableModels() []string {\n    models := make([]string, 0, len(p.modelMap))\n    for model := range p.modelMap {\n        models = append(models, model)\n    }\n    return models\n}\n\nfunc (p *ClaudeProvider) GenerateResponse(ctx context.Context, prompt string, params ProviderParams) (string, error) {\n    // Map generic model to provider-specific model\n    modelName, ok := p.modelMap[params.Model]\n    if !ok {\n        return \"\", fmt.Errorf(\"unsupported model: %s\", params.Model)\n    }\n\n    // Set up Claude-specific request\n    message := anthropic.NewMessageRequest().\n        WithModel(modelName).\n        WithMaxTokens(params.MaxTokens).\n        WithTemperature(params.Temperature).\n        WithPrompt(prompt)\n\n    // Send request to Claude API\n    resp, err := p.client.Messages(ctx, message)\n    if err != nil {\n        return \"\", err\n    }\n\n    return resp.Content[0].Text, nil\n}\n</code></pre>"},{"location":"planning/shim_implementation/#phase-3-context-management-weeks-5-6","title":"Phase 3: Context Management (Weeks 5-6)","text":"<ol> <li>Implement conversation history management</li> <li>Build context window tracking</li> <li>Create context pruning strategies</li> <li>Develop memory management</li> <li>Add context prioritization</li> </ol> <pre><code>// Example context management\ntype Context struct {\n    Messages        []Message\n    TokenCount      int\n    MaxTokens       int\n    SystemPrompt    string\n    ActiveTools     []Tool\n}\n\nfunc NewContext(maxTokens int, systemPrompt string) *Context {\n    return &amp;Context{\n        Messages:     make([]Message, 0),\n        MaxTokens:    maxTokens,\n        SystemPrompt: systemPrompt,\n    }\n}\n\nfunc (c *Context) AddMessage(role string, content string) {\n    message := Message{\n        Role:    role,\n        Content: content,\n    }\n\n    // Estimate token count\n    tokens := EstimateTokens(content)\n\n    // Add to context\n    c.Messages = append(c.Messages, message)\n    c.TokenCount += tokens\n\n    // Prune if necessary\n    c.pruneIfNeeded()\n}\n\nfunc (c *Context) pruneIfNeeded() {\n    // If we're under the token limit, no need to prune\n    if c.TokenCount &lt; c.MaxTokens {\n        return\n    }\n\n    // Prune strategy: remove oldest messages first, but keep the latest exchange\n    // Always preserve system prompt and the most recent user message + assistant response\n\n    // Calculate how many tokens we need to remove\n    toRemove := c.TokenCount - c.MaxTokens + 200 // Buffer of 200 tokens\n\n    // Keep removing messages until we've freed up enough tokens\n    removed := 0\n    preserveCount := 2 // Preserve the latest exchange\n\n    for i := 0; i &lt; len(c.Messages) - preserveCount; i++ {\n        messageTokens := EstimateTokens(c.Messages[i].Content)\n\n        if removed + messageTokens &gt;= toRemove {\n            // We've removed enough tokens\n            c.Messages = c.Messages[i:]\n            c.TokenCount -= removed\n            break\n        }\n\n        removed += messageTokens\n    }\n}\n</code></pre>"},{"location":"planning/shim_implementation/#phase-4-format-converters-week-7","title":"Phase 4: Format Converters (Week 7)","text":"<ol> <li>Implement JSON formatter</li> <li>Create Markdown formatter</li> <li>Add plain text formatter</li> <li>Build format detection</li> <li>Develop structured output parsing</li> </ol> <pre><code>// Example formatter implementation\ntype Formatter interface {\n    Format(input interface{}) (string, error)\n    Parse(input string, into interface{}) error\n}\n\ntype JSONFormatter struct{}\n\nfunc NewJSONFormatter() Formatter {\n    return &amp;JSONFormatter{}\n}\n\nfunc (f *JSONFormatter) Format(input interface{}) (string, error) {\n    data, err := json.Marshal(input)\n    if err != nil {\n        return \"\", err\n    }\n    return string(data), nil\n}\n\nfunc (f *JSONFormatter) Parse(input string, into interface{}) error {\n    return json.Unmarshal([]byte(input), into)\n}\n\n// Format converter registry\ntype FormatRegistry struct {\n    formatters map[string]Formatter\n}\n\nfunc NewFormatRegistry() *FormatRegistry {\n    registry := &amp;FormatRegistry{\n        formatters: make(map[string]Formatter),\n    }\n\n    // Register default formatters\n    registry.Register(\"json\", NewJSONFormatter())\n    registry.Register(\"markdown\", NewMarkdownFormatter())\n    registry.Register(\"text\", NewTextFormatter())\n\n    return registry\n}\n\nfunc (r *FormatRegistry) Register(name string, formatter Formatter) {\n    r.formatters[name] = formatter\n}\n\nfunc (r *FormatRegistry) Get(name string) (Formatter, error) {\n    formatter, ok := r.formatters[name]\n    if !ok {\n        return nil, fmt.Errorf(\"formatter not found: %s\", name)\n    }\n    return formatter, nil\n}\n</code></pre>"},{"location":"planning/shim_implementation/#phase-5-caching-optimization-week-8","title":"Phase 5: Caching &amp; Optimization (Week 8)","text":"<ol> <li>Implement response caching</li> <li>Add prompt optimization</li> <li>Create batch processing</li> <li>Develop rate limiting</li> <li>Build request deduplication</li> </ol> <pre><code>// Example cache implementation\ntype Cache interface {\n    Get(key string) (string, bool)\n    Set(key string, value string)\n    Clear()\n}\n\ntype InMemoryCache struct {\n    cache map[string]string\n    mu    sync.RWMutex\n    size  int\n}\n\nfunc NewCache(size int) Cache {\n    return &amp;InMemoryCache{\n        cache: make(map[string]string),\n        size:  size,\n    }\n}\n\nfunc (c *InMemoryCache) Get(key string) (string, bool) {\n    c.mu.RLock()\n    defer c.mu.RUnlock()\n\n    value, ok := c.cache[key]\n    return value, ok\n}\n\nfunc (c *InMemoryCache) Set(key string, value string) {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n\n    // Check if we need to evict entries\n    if len(c.cache) &gt;= c.size {\n        // Simple eviction strategy: remove a random entry\n        for k := range c.cache {\n            delete(c.cache, k)\n            break\n        }\n    }\n\n    c.cache[key] = value\n}\n\nfunc (c *InMemoryCache) Clear() {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n\n    c.cache = make(map[string]string)\n}\n\n// Response caching in the shim\nfunc (s *CoreShim) Generate(ctx context.Context, input GenerateInput) (*GenerateOutput, error) {\n    // Generate cache key\n    cacheKey := generateCacheKey(input)\n\n    // Check cache if enabled\n    if s.cache != nil {\n        if cachedResponse, found := s.cache.Get(cacheKey); found {\n            return &amp;GenerateOutput{\n                Text:      cachedResponse,\n                FromCache: true,\n            }, nil\n        }\n    }\n\n    // Prepare prompt for the provider\n    prompt, err := s.preparePrompt(input)\n    if err != nil {\n        return nil, err\n    }\n\n    // Call provider\n    response, err := s.activeProvider.GenerateResponse(ctx, prompt, ProviderParams{\n        Model:       s.activeModel,\n        MaxTokens:   input.MaxTokens,\n        Temperature: input.Temperature,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    // Cache response if enabled\n    if s.cache != nil {\n        s.cache.Set(cacheKey, response)\n    }\n\n    return &amp;GenerateOutput{\n        Text:      response,\n        FromCache: false,\n    }, nil\n}\n</code></pre>"},{"location":"planning/shim_implementation/#phase-6-tool-integration-weeks-9-10","title":"Phase 6: Tool Integration (Weeks 9-10)","text":"<ol> <li>Implement tool registry</li> <li>Add basic tool set</li> <li>Create tool response handling</li> <li>Build tool error handling</li> <li>Develop tool authorization</li> </ol> <pre><code>// Example tool implementation\ntype Tool interface {\n    Name() string\n    Description() string\n    Execute(ctx context.Context, params map[string]interface{}) (interface{}, error)\n}\n\ntype WebSearchTool struct {\n    client *search.Client\n}\n\nfunc NewWebSearchTool(client *search.Client) Tool {\n    return &amp;WebSearchTool{\n        client: client,\n    }\n}\n\nfunc (t *WebSearchTool) Name() string {\n    return \"web_search\"\n}\n\nfunc (t *WebSearchTool) Description() string {\n    return \"Search the web for information\"\n}\n\nfunc (t *WebSearchTool) Execute(ctx context.Context, params map[string]interface{}) (interface{}, error) {\n    // Extract parameters\n    query, ok := params[\"query\"].(string)\n    if !ok {\n        return nil, fmt.Errorf(\"missing 'query' parameter\")\n    }\n\n    limit := 5 // Default limit\n    if limitParam, ok := params[\"limit\"].(float64); ok {\n        limit = int(limitParam)\n    }\n\n    // Execute search\n    results, err := t.client.Search(ctx, query, limit)\n    if err != nil {\n        return nil, err\n    }\n\n    return results, nil\n}\n\n// Tool registry\ntype ToolRegistry struct {\n    tools map[string]Tool\n}\n\nfunc NewToolRegistry() *ToolRegistry {\n    return &amp;ToolRegistry{\n        tools: make(map[string]Tool),\n    }\n}\n\nfunc (r *ToolRegistry) Register(tool Tool) {\n    r.tools[tool.Name()] = tool\n}\n\nfunc (r *ToolRegistry) Get(name string) (Tool, error) {\n    tool, ok := r.tools[name]\n    if !ok {\n        return nil, fmt.Errorf(\"tool not found: %s\", name)\n    }\n    return tool, nil\n}\n\nfunc (r *ToolRegistry) List() []string {\n    names := make([]string, 0, len(r.tools))\n    for name := range r.tools {\n        names = append(names, name)\n    }\n    return names\n}\n</code></pre>"},{"location":"planning/shim_implementation/#testing-strategy","title":"Testing Strategy","text":""},{"location":"planning/shim_implementation/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test each provider implementation</li> <li>Verify correct context management</li> <li>Ensure proper format conversion</li> <li>Validate caching behavior</li> <li>Test tool execution</li> </ul>"},{"location":"planning/shim_implementation/#integration-tests","title":"Integration Tests","text":"<ul> <li>End-to-end tests with mock LLM providers</li> <li>Verify cross-provider compatibility</li> <li>Test fallback mechanisms</li> <li>Validate context pruning strategies</li> </ul>"},{"location":"planning/shim_implementation/#performance-tests","title":"Performance Tests","text":"<ul> <li>Benchmark response times</li> <li>Measure memory usage</li> <li>Test caching effectiveness</li> <li>Verify rate limiting behavior</li> </ul>"},{"location":"planning/shim_implementation/#deployment-considerations","title":"Deployment Considerations","text":""},{"location":"planning/shim_implementation/#configuration","title":"Configuration","text":"<p>The Shim will be configured through environment variables or configuration files:</p> <pre><code>shim:\n  provider: claude  # Default provider\n  model: claude-3.7-sonnet  # Default model\n  fallback_providers: [openai, llama]  # Fallback order\n  cache:\n    enabled: true\n    size: 1000  # Number of entries\n  context:\n    max_tokens: 15000  # Max context window\n    system_prompt: \"You are a helpful assistant.\"\n</code></pre>"},{"location":"planning/shim_implementation/#monitoring","title":"Monitoring","text":"<p>The Shim will expose metrics for monitoring:</p> <ul> <li>Request counts by provider</li> <li>Error rates</li> <li>Response times</li> <li>Cache hit rates</li> <li>Token usage</li> </ul>"},{"location":"planning/shim_implementation/#logging","title":"Logging","text":"<p>Detailed logging will be implemented:</p> <ul> <li>Request/response pairs (sanitized)</li> <li>Provider switches</li> <li>Cache events</li> <li>Context pruning events</li> <li>Tool executions</li> </ul>"},{"location":"planning/shim_implementation/#documentation","title":"Documentation","text":""},{"location":"planning/shim_implementation/#api-documentation","title":"API Documentation","text":"<pre><code>// Generate a response from the LLM\nfunc (s *Shim) Generate(ctx context.Context, input GenerateInput) (*GenerateOutput, error)\n\n// GenerateInput defines the input parameters for generation\ntype GenerateInput struct {\n    Prompt      string            // The prompt to send to the LLM\n    MaxTokens   int               // Maximum tokens to generate\n    Temperature float32           // Temperature (0.0-1.0)\n    Tools       []string          // Tools to make available\n    Context     *Context          // Conversation context (optional)\n    Format      string            // Desired output format (json, text, markdown)\n}\n\n// GenerateOutput contains the generated response\ntype GenerateOutput struct {\n    Text      string        // Generated text\n    FromCache bool          // Whether the response was from cache\n    TokensUsed int          // Number of tokens used\n    Tools     []ToolUsage   // Tools used in generation\n}\n</code></pre>"},{"location":"planning/shim_implementation/#usage-examples","title":"Usage Examples","text":"<pre><code>// Initialize the shim\nshim := shim.NewShim()\nerr := shim.Initialize(shim.Config{\n    Provider: \"claude\",\n    Model: \"claude-3.7-sonnet\",\n    CacheEnabled: true,\n})\nif err != nil {\n    log.Fatalf(\"Failed to initialize shim: %v\", err)\n}\n\n// Generate a response\noutput, err := shim.Generate(ctx, shim.GenerateInput{\n    Prompt: \"What is the capital of France?\",\n    MaxTokens: 100,\n    Temperature: 0.7,\n})\nif err != nil {\n    log.Fatalf(\"Failed to generate response: %v\", err)\n}\n\nfmt.Println(output.Text)\n</code></pre>"},{"location":"planning/shim_implementation/#implementation-schedule","title":"Implementation Schedule","text":"Week Focus Deliverables 1 Core Framework Interface definitions, config management 2 Core Framework Provider registration, error handling 3 Provider Implementations Claude and OpenAI providers 4 Provider Implementations Llama provider, fallback mechanisms 5 Context Management Conversation history, context tracking 6 Context Management Context pruning, memory management 7 Format Converters JSON, Markdown, text formatters 8 Caching &amp; Optimization Response caching, prompt optimization 9 Tool Integration Tool registry, basic tools 10 Tool Integration Tool response handling, authorization"},{"location":"usage/multimodal/","title":"Multimodal Support","text":"<p>SentinelStacks provides robust support for multimodal interactions, allowing agents to process and analyze various types of content, including images. This document explains how to use the multimodal capabilities.</p>"},{"location":"usage/multimodal/#quick-start","title":"Quick Start","text":""},{"location":"usage/multimodal/#analyzing-images-with-the-cli","title":"Analyzing Images with the CLI","text":"<p>You can use the <code>analyze-image</code> command to quickly analyze images without creating a long-running agent:</p> <pre><code># Analyze an image with Claude\nsentinel multimodal analyze-image --provider claude --image path/to/image.jpg \"What's in this image?\"\n\n# Analyze an image with OpenAI\nsentinel multimodal analyze-image --provider openai --image path/to/image.jpg \"Describe this image in detail\"\n\n# Analyze multiple images\nsentinel multimodal analyze-image --provider claude --image image1.jpg,image2.jpg \"Compare these images\"\n</code></pre>"},{"location":"usage/multimodal/#interactive-chat-with-images","title":"Interactive Chat with Images","text":"<p>For a more interactive experience, you can use the <code>chat</code> command which supports both text and image inputs:</p> <pre><code># Start a chat session with default settings\nsentinel chat\n\n# Start a chat session with a specific provider and model\nsentinel chat --provider claude --model claude-3-opus-20240229\n\n# Start a chat session with initial images\nsentinel chat --provider openai --images image1.jpg,image2.jpg\n</code></pre> <p>During the chat session, you can upload images using the <code>/image</code> command:</p> <pre><code>You: /image path/to/image.jpg\nEnter a question about the image(s): What's in this image?\n</code></pre>"},{"location":"usage/multimodal/#supported-providers","title":"Supported Providers","text":"<p>The following providers support multimodal capabilities:</p> Provider Multimodal Support Supported Models Claude Yes claude-3-opus, claude-3-sonnet, claude-3-haiku OpenAI Yes gpt-4o, gpt-4-vision-preview Ollama Yes (depends on model) llava, bakllava, llava-llama3 Mock Yes (for testing) mock-model"},{"location":"usage/multimodal/#running-agents-with-multimodal-input","title":"Running Agents with Multimodal Input","text":"<p>You can run agents with multimodal input using the <code>run</code> command with the <code>--image</code> flag:</p> <pre><code># Run an agent with an image\nsentinel run my-agent --image path/to/image.jpg\n\n# Run an agent with multiple images\nsentinel run my-agent --image image1.jpg,image2.jpg\n</code></pre>"},{"location":"usage/multimodal/#programmatic-usage","title":"Programmatic Usage","text":"<p>If you're building applications that use SentinelStacks for multimodal processing, you can use the runtime API:</p> <pre><code>import (\n    \"github.com/sentinelstacks/sentinel/internal/multimodal\"\n    \"github.com/sentinelstacks/sentinel/internal/runtime\"\n)\n\n// Create a multimodal agent\nagent, err := rt.CreateMultimodalAgent(\"my-agent\", \"claude:latest\", \"claude-3-opus\", \"claude\", apiKey, \"\")\n\n// Process text input\nresponse, err := agent.ProcessTextInput(ctx, \"Hello, world!\")\n\n// Process multimodal input\ninput := multimodal.NewInput()\ninput.AddText(\"What's in this image?\")\ninput.AddImage(imageData, \"image/jpeg\")\noutput, err := agent.ProcessMultimodalInput(ctx, input.Contents)\n</code></pre>"},{"location":"usage/multimodal/#best-practices","title":"Best Practices","text":"<ol> <li>Image Quality: Provide clear, high-quality images for the best results.</li> <li>Specific Questions: Ask specific questions about the images rather than general ones.</li> <li>Multiple Images: When analyzing multiple images, be clear about which image you're referring to.</li> <li>Image Format: JPEG, PNG, GIF, WEBP, and BMP formats are supported. JPEG and PNG are recommended.</li> <li>Image Size: Large images (&gt;10MB) may be resized or rejected by some providers.</li> </ol>"},{"location":"usage/multimodal/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Error: Provider does not support multimodal: Ensure you're using a model that supports multimodal input.</li> <li>Error: Failed to read image file: Check that the image path is correct and the file exists.</li> <li>Poor analysis quality: Try using a different provider or a more advanced model. </li> </ul>"},{"location":"user-guides/","title":"SentinelStacks User Guides","text":"<p>Welcome to the SentinelStacks user guides! These documents will help you understand how to use the SentinelStacks system effectively.</p>"},{"location":"user-guides/#getting-started","title":"Getting Started","text":"<ul> <li>Quick Start Guide - Get up and running with SentinelStacks in minutes</li> <li>Installation Guide - Detailed installation instructions for different platforms</li> <li>Configuration Guide - How to configure SentinelStacks for your environment</li> </ul>"},{"location":"user-guides/#core-concepts","title":"Core Concepts","text":"<ul> <li>Understanding Sentinelfiles - How to write effective natural language agent definitions</li> <li>Agent Lifecycle - Understanding how agents are created, run, and managed</li> <li>State Management - Working with persistent agent state</li> <li>LLM Providers - Configuring and using different LLM backends</li> </ul>"},{"location":"user-guides/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Agent Tools - Adding capabilities to your agents with tools</li> <li>Agent Networks - Orchestrating multiple agents to work together</li> <li>Registry Management - Publishing and sharing your agents</li> <li>Custom Runtimes - Advanced runtime configurations</li> <li>Enterprise Deployment - Deploying SentinelStacks in enterprise environments</li> </ul>"},{"location":"user-guides/#desktop-application","title":"Desktop Application","text":"<ul> <li>Sentinel Desktop Guide - Using the graphical interface</li> <li>Visual Agent Builder - Creating agents with the visual builder</li> <li>Agent Monitoring - Monitoring and debugging your agents</li> </ul>"},{"location":"user-guides/#cli-reference","title":"CLI Reference","text":"<ul> <li>CLI Commands - Comprehensive reference for all CLI commands</li> <li>CLI Configuration - Configuring the CLI for your workflow</li> <li>CLI Plugins - Extending the CLI with plugins</li> </ul>"},{"location":"user-guides/#api-integration","title":"API Integration","text":"<ul> <li>API Overview - Introduction to the SentinelStacks API</li> <li>Authentication - Working with API authentication</li> <li>SDK Examples - Code examples for various programming languages</li> </ul>"},{"location":"user-guides/#best-practices","title":"Best Practices","text":"<ul> <li>Agent Design Patterns - Patterns for effective agent design</li> <li>Performance Optimization - Optimizing agent performance</li> <li>Security Guidelines - Keeping your agents and data secure</li> <li>CI/CD Integration - Integrating SentinelStacks into CI/CD pipelines</li> </ul>"},{"location":"user-guides/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Common Issues - Solutions to common problems</li> <li>Debugging Agents - How to debug agent issues</li> <li>Logs and Diagnostics - Working with logs and diagnostic information</li> <li>Support Resources - Where to get help</li> </ul>"},{"location":"user-guides/#tutorials","title":"Tutorials","text":"<ul> <li>Building a Customer Support Agent - Create a comprehensive customer support agent</li> <li>Creating a Research Assistant - Build a research assistant with knowledge retrieval</li> <li>Developing a Data Analyst Agent - Create an agent for data analysis tasks</li> <li>Designing a Content Creator - Build an agent that creates various content types</li> </ul>"},{"location":"user-guides/advanced_agents/","title":"Designing Advanced Agents","text":"<p>This guide covers advanced techniques for designing sophisticated agents with SentinelStacks. We'll explore complex agent architectures, multi-agent systems, and specialized agent capabilities.</p>"},{"location":"user-guides/advanced_agents/#advanced-sentinelfile-structure","title":"Advanced Sentinelfile Structure","text":"<p>Advanced agents leverage the full capabilities of the Sentinelfile format:</p> <pre><code>name: advanced-agent\ndescription: Advanced agent with sophisticated capabilities\nmodel:\n  base: claude3\n  parameters:\n    temperature: 0.3\n    top_p: 0.95\n  guardrails:\n    - ethical_guidelines\n    - accuracy_requirements\nstate:\n  - persistent_memory\n  - user_preferences\n  - operational_context\ninitialization:\n  introduction: \"Custom introduction message\"\n  setup_actions:\n    - initialize_resources\n    - prepare_tools\ntermination:\n  farewell: \"Custom farewell message\"\n  cleanup_actions:\n    - save_state\n    - generate_report\ntools:\n  - tool_name:\n      purpose: Description of the tool's purpose\n      parameters:\n        param1: value1\n        param2: value2\ndata_sources:\n  - source_name:\n      update_frequency: daily\n      source: api_endpoint\n      access: read_only\ncompliance:\n  regulatory_frameworks:\n    - framework1\n    - framework2\n  disclaimers:\n    - disclaimer1\n    - disclaimer2\nworkflow:\n  methodology:\n    - step1\n    - step2\n  control_mechanisms:\n    - mechanism1: true\n    - mechanism2: false\n</code></pre>"},{"location":"user-guides/advanced_agents/#agent-design-patterns","title":"Agent Design Patterns","text":""},{"location":"user-guides/advanced_agents/#specialized-agents","title":"Specialized Agents","text":"<p>Specialized agents focus on a specific domain or task:</p> <ul> <li>Domain Expert Agents: Deep knowledge in fields like finance, medicine, or law</li> <li>Task-Specific Agents: Optimized for tasks like summarization, code generation, or data analysis</li> <li>Tool-Using Agents: Primarily focused on effectively using external tools</li> </ul>"},{"location":"user-guides/advanced_agents/#multi-agent-systems","title":"Multi-Agent Systems","text":"<p>Coordination of multiple agents working together:</p> <ul> <li>Manager-Worker Pattern: A manager agent coordinates specialized worker agents</li> <li>Peer Collaboration: Agents of similar capabilities collaborating on complex tasks</li> <li>Competitive Agents: Multiple agents proposing solutions with voting mechanisms</li> </ul>"},{"location":"user-guides/advanced_agents/#stateful-agents","title":"Stateful Agents","text":"<p>Agents that maintain persistent state across sessions:</p> <ul> <li>Long-Term Memory: Storing and recalling user preferences and past interactions</li> <li>Progressive Learning: Building knowledge over multiple sessions</li> <li>Context Awareness: Adapting to changing operational conditions</li> </ul>"},{"location":"user-guides/advanced_agents/#advanced-capabilities","title":"Advanced Capabilities","text":""},{"location":"user-guides/advanced_agents/#tool-integration","title":"Tool Integration","text":"<pre><code>tools:\n  - web_search:\n      purpose: For retrieving information from the internet\n      parameters:\n        max_results: 5\n        search_depth: 2\n        filter_domain: all\n  - code_executor:\n      purpose: For running and testing code\n      parameters:\n        languages: [python, javascript, go]\n        timeout: 5s\n        sandbox: true\n  - document_processor:\n      purpose: For handling structured documents\n      parameters:\n        formats: [pdf, docx, txt, json]\n        max_size: 10MB\n</code></pre>"},{"location":"user-guides/advanced_agents/#external-data-sources","title":"External Data Sources","text":"<pre><code>data_sources:\n  - market_data:\n      update_frequency: realtime\n      source: financial_api\n      access: read_only\n      credentials: env.MARKET_API_KEY\n  - user_database:\n      update_frequency: on_demand\n      source: internal_database\n      access: read_write\n      authentication: oauth2\n</code></pre>"},{"location":"user-guides/advanced_agents/#compliance-controls","title":"Compliance Controls","text":"<pre><code>compliance:\n  regulatory_frameworks:\n    - gdpr\n    - hipaa\n    - financial_regulations\n  privacy_controls:\n    - data_minimization\n    - user_consent_required\n    - data_retention_policy\n  security_measures:\n    - encryption_at_rest\n    - secure_communications\n    - access_controls\n</code></pre>"},{"location":"user-guides/advanced_agents/#enhanced-cognitive-capabilities","title":"Enhanced Cognitive Capabilities","text":""},{"location":"user-guides/advanced_agents/#reasoning-frameworks","title":"Reasoning Frameworks","text":"<pre><code>cognition:\n  reasoning_methods:\n    - chain_of_thought\n    - tree_of_thought\n    - backtracking\n  decision_approach:\n    - cost_benefit_analysis\n    - risk_assessment\n    - ethical_consideration\n</code></pre>"},{"location":"user-guides/advanced_agents/#adaptability","title":"Adaptability","text":"<pre><code>adaptability:\n  learning_mechanisms:\n    - feedback_incorporation\n    - observation_based\n    - reinforcement\n  adaptation_triggers:\n    - performance_metrics\n    - user_feedback\n    - environmental_changes\n</code></pre>"},{"location":"user-guides/advanced_agents/#multi-agent-communication","title":"Multi-Agent Communication","text":""},{"location":"user-guides/advanced_agents/#message-protocols","title":"Message Protocols","text":"<pre><code>communication:\n  protocols:\n    - json_messages\n    - structured_queries\n    - natural_language\n  channels:\n    - agent_bus:\n        access: read_write\n        format: json\n    - human_interface:\n        access: read_write\n        format: natural_language\n</code></pre>"},{"location":"user-guides/advanced_agents/#team-structures","title":"Team Structures","text":"<pre><code>team:\n  role: coordinator\n  reports_to: human_supervisor\n  manages:\n    - researcher\n    - writer\n    - reviewer\n  communication_patterns:\n    - status_updates: hourly\n    - escalation_path: [team_lead, supervisor]\n</code></pre>"},{"location":"user-guides/advanced_agents/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guides/advanced_agents/#resource-management","title":"Resource Management","text":"<pre><code>resources:\n  memory_management:\n    max_context_size: 32000\n    prioritization: recency_weighted\n  compute_allocation:\n    token_budget: 100000\n    batch_processing: true\n</code></pre>"},{"location":"user-guides/advanced_agents/#caching-strategies","title":"Caching Strategies","text":"<pre><code>caching:\n  response_cache:\n    enabled: true\n    ttl: 24h\n    invalidation_triggers: [new_data, user_request]\n  knowledge_cache:\n    enabled: true\n    persistent: true\n</code></pre>"},{"location":"user-guides/advanced_agents/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple, Add Complexity: Begin with a basic agent and incrementally add advanced features</li> <li>Test Thoroughly: Validate each capability before combining multiple advanced features</li> <li>Consider Ethical Implications: Evaluate potential impacts and build in appropriate safeguards</li> <li>Document Extensively: Provide clear documentation for complex agent configurations</li> <li>Implement Monitoring: Add logging and observability for complex agent behaviors</li> <li>Use Appropriate Guardrails: Always include safety mechanisms appropriate to the agent's capabilities</li> </ol>"},{"location":"user-guides/advanced_agents/#real-world-applications","title":"Real-World Applications","text":"<ul> <li>Enterprise Customer Support: Multi-agent system with triage, specialists, and escalation</li> <li>Research Collaboration: Team of agents working on complex research questions</li> <li>Content Production: Coordinated content creation, editing, and publishing pipeline</li> <li>Financial Services: Compliance-aware advisory agents with market data integration</li> <li>Healthcare Assistance: Privacy-conscious agents for healthcare information management</li> </ul>"},{"location":"user-guides/advanced_agents/#conclusion","title":"Conclusion","text":"<p>Advanced agent design with SentinelStacks allows for creating sophisticated AI systems that can handle complex tasks, maintain appropriate safeguards, and work together effectively. By leveraging the full capabilities of the Sentinelfile format, you can create agents that are specialized, collaborative, and responsible. </p>"},{"location":"user-guides/agent_packaging/","title":"Agent Packaging and Security","text":"<p>SentinelStacks uses a custom packaging format for agents and stacks that ensures portability, security, and integrity. This guide explains how agent packaging works and how to protect your agents from tampering.</p>"},{"location":"user-guides/agent_packaging/#packaging-format-overview","title":"Packaging Format Overview","text":""},{"location":"user-guides/agent_packaging/#file-extensions","title":"File Extensions","text":"<p>SentinelStacks uses distinct file extensions to identify different types of content:</p> Extension Description MIME Type <code>.agent.sntl</code> Agent package <code>application/x-sentinel-agent</code> <code>.stack.sntl</code> Stack package <code>application/x-sentinel-stack</code> <code>.agent.yaml</code> Agent definition <code>application/x-sentinel-agent-def+yaml</code> <code>.stack.yaml</code> Stack definition <code>application/x-sentinel-stack-def+yaml</code> <code>.sig.sntl</code> Detached signature <code>application/x-sentinel-signature</code>"},{"location":"user-guides/agent_packaging/#package-structure","title":"Package Structure","text":"<p>Each <code>.sntl</code> package follows a specific structure:</p> <ol> <li>Magic Header: Identifies the package type</li> <li>Agent packages: <code>SNTL-AGENT-PKG</code></li> <li> <p>Stack packages: <code>SNTL-STACK-PKG</code></p> </li> <li> <p>Version Field: A 4-byte version field identifying the package format version</p> </li> <li> <p>Compressed Archive: A gzipped tar archive containing:</p> </li> <li><code>sentinel.manifest.json</code>: Package metadata and file inventory</li> <li>The main definition file (<code>.agent.yaml</code> or <code>.stack.yaml</code>)</li> <li>Prompt templates and system prompts</li> <li>Tool configurations</li> <li>Documentation</li> <li> <p>Resources (like images or data files)</p> </li> <li> <p>Signature Block: Optional cryptographic signatures</p> </li> </ol>"},{"location":"user-guides/agent_packaging/#creating-packages","title":"Creating Packages","text":""},{"location":"user-guides/agent_packaging/#building-an-agent-package","title":"Building an Agent Package","text":"<p>To create an agent package from a Sentinelfile:</p> <pre><code># Build an agent package from a Sentinelfile\nsentinel build ResearchAgent.yaml --output research-agent.agent.sntl\n</code></pre> <p>You can include additional resources:</p> <pre><code># Include specific resources\nsentinel build ResearchAgent.yaml --include-resources ./prompts,./data\n</code></pre>"},{"location":"user-guides/agent_packaging/#building-a-stack-package","title":"Building a Stack Package","text":"<p>For multi-agent stacks:</p> <pre><code># Build a stack package from a Stackfile\nsentinel stack build CollaborationStack.yaml --output collab-system.stack.sntl\n</code></pre>"},{"location":"user-guides/agent_packaging/#package-security","title":"Package Security","text":"<p>SentinelStacks provides several features to secure agent packages and protect them from tampering.</p>"},{"location":"user-guides/agent_packaging/#package-signing","title":"Package Signing","text":"<p>You can cryptographically sign packages to verify their authenticity:</p> <pre><code># Sign a package during build\nsentinel build ResearchAgent.yaml --sign --key-id my-signing-key\n\n# Sign an existing package\nsentinel sign research-agent.agent.sntl --key-id my-signing-key\n</code></pre>"},{"location":"user-guides/agent_packaging/#signature-verification","title":"Signature Verification","text":"<p>To verify a signed package:</p> <pre><code># Verify a package signature\nsentinel verify research-agent.agent.sntl\n\n# Verify against a specific key\nsentinel verify research-agent.agent.sntl --key-id trusted-key\n</code></pre>"},{"location":"user-guides/agent_packaging/#key-management","title":"Key Management","text":"<p>SentinelStacks includes a key management system for package signing:</p> <pre><code># Generate a new signing key\nsentinel key generate --name my-signing-key\n\n# List available keys\nsentinel key list\n\n# Export a public key for sharing\nsentinel key export --name my-signing-key --public-only\n\n# Import a trusted key\nsentinel key import colleague-key.pub --name colleague\n</code></pre>"},{"location":"user-guides/agent_packaging/#tamper-protection","title":"Tamper Protection","text":"<p>Packages include several tamper protection mechanisms:</p> <ol> <li>Content Verification: Package manifests include content hashes for all files</li> <li>Signature Verification: Cryptographic signatures ensure authenticity</li> <li>Runtime Verification: Runtime environment verifies package integrity before execution</li> </ol>"},{"location":"user-guides/agent_packaging/#working-with-packages","title":"Working with Packages","text":""},{"location":"user-guides/agent_packaging/#inspecting-packages","title":"Inspecting Packages","text":"<p>To inspect the contents of a package:</p> <pre><code># Show package metadata\nsentinel inspect research-agent.agent.sntl\n\n# List files in a package\nsentinel inspect research-agent.agent.sntl --list\n\n# Extract a specific file\nsentinel inspect research-agent.agent.sntl --extract prompts/main.txt\n</code></pre>"},{"location":"user-guides/agent_packaging/#extracting-packages","title":"Extracting Packages","text":"<p>You can extract packages to view or modify their contents:</p> <pre><code># Extract an entire package\nsentinel extract research-agent.agent.sntl --output ./extracted\n\n# Extract with verification\nsentinel extract research-agent.agent.sntl --verify\n</code></pre>"},{"location":"user-guides/agent_packaging/#modifying-packages","title":"Modifying Packages","text":"<p>To modify a package, extract it, make changes, and rebuild:</p> <pre><code># Extract, modify, and rebuild (with new signature)\nsentinel extract research-agent.agent.sntl --output ./temp\n# ... make modifications ...\nsentinel build ./temp/ResearchAgent.yaml --sign --key-id my-key\n</code></pre>"},{"location":"user-guides/agent_packaging/#package-distribution","title":"Package Distribution","text":""},{"location":"user-guides/agent_packaging/#registry-storage","title":"Registry Storage","text":"<p>When stored in the registry, packages maintain their integrity through:</p> <ol> <li>Package-level signatures</li> <li>Transport-level encryption (TLS)</li> <li>Registry-added checksums and metadata</li> </ol>"},{"location":"user-guides/agent_packaging/#secure-distribution","title":"Secure Distribution","text":"<p>Best practices for secure package distribution:</p> <ol> <li>Always sign packages before distribution</li> <li>Share public keys with users who need to verify packages</li> <li>Use trusted registries for distribution</li> <li>Verify packages before running them in production</li> </ol>"},{"location":"user-guides/agent_packaging/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guides/agent_packaging/#version-locking","title":"Version Locking","text":"<p>You can lock a package to a specific LLM version:</p> <pre><code># In Sentinelfile\nname: CriticalAgent\nversion: 1.0.0\nbaseModel: claude-3-opus-20240229\nlockToModel: true  # Prevents running on different models\n</code></pre>"},{"location":"user-guides/agent_packaging/#environment-requirements","title":"Environment Requirements","text":"<p>Specify required environment features:</p> <pre><code># In Sentinelfile\nname: SecurityAgent\nenvironment:\n  requiredFeatures:\n    - secure-execution\n    - isolated-network\n  minVersion: \"1.2.0\"\n</code></pre>"},{"location":"user-guides/agent_packaging/#content-versioning","title":"Content Versioning","text":"<p>Implement content versioning with package metadata:</p> <pre><code># In Sentinelfile\nmetadata:\n  contentVersion: \"2023-05-15\"\n  trainingCutoff: \"2023-03-01\"\n  requiredData: [\"2023Q1-security-db\", \"compliance-rules-v3\"]\n</code></pre>"},{"location":"user-guides/agent_packaging/#compatibility-and-portability","title":"Compatibility and Portability","text":""},{"location":"user-guides/agent_packaging/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":"<p>SentinelStacks packages work across platforms:</p> <ul> <li>Linux, macOS, and Windows</li> <li>Server and desktop environments</li> <li>Container-based deployments</li> </ul>"},{"location":"user-guides/agent_packaging/#runtime-compatibility","title":"Runtime Compatibility","text":"<p>Packages specify runtime compatibility:</p> <pre><code># In Sentinelfile\ncompatibility:\n  sentinel: \"&gt;=1.0.0 &lt;2.0.0\"\n  providers: [\"claude\", \"openai\"]\n  features: [\"streaming\", \"tools\"]\n</code></pre>"},{"location":"user-guides/agent_packaging/#best-practices","title":"Best Practices","text":"<ol> <li>Always sign packages for distribution</li> <li>Include documentation within your packages</li> <li>Version your packages with semantic versioning</li> <li>Test packages in isolated environments before deployment</li> <li>Maintain key security for your signing keys</li> <li>Audit package contents regularly</li> <li>Implement renewal procedures for long-lived agents </li> </ol>"},{"location":"user-guides/agent_tools/","title":"Agent Tools","text":"<p>SentinelStacks provides a powerful tools system that enables agents to interact with external resources and perform actions beyond text generation. This guide explains how to use and configure tools for your agents.</p>"},{"location":"user-guides/agent_tools/#overview","title":"Overview","text":"<p>Tools in SentinelStacks allow agents to:</p> <ul> <li>Access and manipulate files</li> <li>Search the web for information</li> <li>Call external APIs</li> <li>Execute specific operations with proper permissions</li> </ul> <p>Each tool has defined parameters, requirements, and associated permissions to ensure security.</p>"},{"location":"user-guides/agent_tools/#available-tools","title":"Available Tools","text":"<p>SentinelStacks includes several built-in tools:</p>"},{"location":"user-guides/agent_tools/#file-tools","title":"File Tools","text":"Tool Description Required Permission <code>file/read</code> Read the contents of a file <code>file</code> <code>file/write</code> Write content to a file <code>file</code> <code>file/list</code> List files in a directory <code>file</code>"},{"location":"user-guides/agent_tools/#web-tools","title":"Web Tools","text":"Tool Description Required Permission <code>web/search</code> Search the web for information <code>network</code>"},{"location":"user-guides/agent_tools/#configuring-tools-in-sentinelfiles","title":"Configuring Tools in Sentinelfiles","text":"<p>To enable tools for an agent, specify them in your Sentinelfile:</p> <pre><code>name: ResearchAssistant\ndescription: An agent that can research topics and save results\nbaseModel: claude-3-sonnet-20240229\n\ntools:\n  - file/read\n  - file/write\n  - web/search\n\ntoolSettings:\n  web/search:\n    default_results: 5\n    safe_search: true\n  file/write:\n    allowed_extensions: [\".txt\", \".md\", \".json\"]\n</code></pre>"},{"location":"user-guides/agent_tools/#tool-settings","title":"Tool Settings","text":"<p>Each tool can have specific settings that control its behavior:</p>"},{"location":"user-guides/agent_tools/#websearch","title":"web/search","text":"<ul> <li><code>default_results</code>: Number of results to return (default: 3)</li> <li><code>safe_search</code>: Enable safe search filtering (default: true)</li> <li><code>timeout</code>: Maximum time in seconds for the search (default: 10)</li> </ul>"},{"location":"user-guides/agent_tools/#fileread","title":"file/read","text":"<ul> <li><code>max_size</code>: Maximum file size in bytes that can be read (default: 1048576)</li> <li><code>allowed_extensions</code>: List of allowed file extensions (default: all)</li> </ul>"},{"location":"user-guides/agent_tools/#filewrite","title":"file/write","text":"<ul> <li><code>max_size</code>: Maximum file size in bytes that can be written (default: 1048576)</li> <li><code>allowed_extensions</code>: List of allowed file extensions (default: all)</li> <li><code>overwrite</code>: Allow overwriting existing files (default: false)</li> </ul>"},{"location":"user-guides/agent_tools/#filelist","title":"file/list","text":"<ul> <li><code>recursive</code>: List files recursively (default: false)</li> <li><code>include_hidden</code>: Include hidden files in the listing (default: false)</li> </ul>"},{"location":"user-guides/agent_tools/#managing-tool-permissions","title":"Managing Tool Permissions","text":"<p>Tools require specific permissions that must be granted to agents for security reasons. The available permissions are:</p> <ul> <li><code>none</code>: No special permissions required</li> <li><code>file</code>: File system access permissions</li> <li><code>network</code>: Network access permissions</li> <li><code>shell</code>: Shell access permissions</li> <li><code>api</code>: API access permissions</li> <li><code>all</code>: All permissions (use with caution)</li> </ul>"},{"location":"user-guides/agent_tools/#permission-management","title":"Permission Management","text":"<p>You can manage tool permissions using the CLI:</p> <pre><code># List permissions for an agent\nsentinel tools perms research-agent\n\n# Grant a permission to an agent\nsentinel tools grant research-agent file\n\n# Revoke a permission from an agent\nsentinel tools revoke research-agent network\n</code></pre>"},{"location":"user-guides/agent_tools/#using-tools-in-agents","title":"Using Tools in Agents","text":"<p>When an agent has tools enabled, it can use them during conversations. The agent will automatically learn about available tools from their descriptions.</p>"},{"location":"user-guides/agent_tools/#example-conversation","title":"Example Conversation","text":"<pre><code>User: I need to research quantum computing and save the results to a file.\n\nAgent: I'll help you research quantum computing and save the information. Let me search for some information first.\n\n[Tool: web/search]\nParameters: {\"query\": \"quantum computing basics recent developments\", \"num_results\": 5}\nResult: [\n  {\n    \"title\": \"Quantum Computing: An Overview of Principles and Recent Advances\",\n    \"url\": \"https://example.com/quantum-overview\",\n    \"snippet\": \"Quantum computing leverages quantum mechanical phenomena like superposition and entanglement...\"\n  },\n  ...\n]\n\nAgent: I've found some information about quantum computing. Here are the key points:\n1. Quantum computers use qubits instead of classical bits\n2. They leverage superposition and entanglement\n3. Recent advances include error correction improvements\n4. IBM and Google have made significant progress in the field\n\nWould you like me to save this information to a file?\n\nUser: Yes, please save it to quantum_research.md.\n\nAgent: I'll save the information to quantum_research.md.\n\n[Tool: file/write]\nParameters: {\"path\": \"quantum_research.md\", \"content\": \"# Quantum Computing Research\\n\\n## Basic Principles\\n\\n- Quantum computers use qubits instead of classical bits\\n- They leverage superposition and entanglement\\n\\n## Recent Developments\\n\\n- Error correction improvements\\n- IBM and Google have made significant progress\\n- Quantum advantage demonstrated for specific problems\\n\"}\nResult: {\"success\": true, \"bytes_written\": 312}\n\nAgent: I've saved the quantum computing research to quantum_research.md. The file includes information about basic principles and recent developments. Is there anything else you'd like me to add to the file or any other research topics you're interested in?\n</code></pre>"},{"location":"user-guides/agent_tools/#creating-custom-tools","title":"Creating Custom Tools","text":"<p>For advanced users, SentinelStacks supports creating custom tools. This requires:</p> <ol> <li>Implementing the <code>Tool</code> interface</li> <li>Registering the tool with the global registry</li> <li>Ensuring proper permission checking</li> </ol> <p>For detailed information on developing custom tools, refer to the Developer Guide.</p>"},{"location":"user-guides/agent_tools/#security-considerations","title":"Security Considerations","text":"<p>When using tools, keep these security practices in mind:</p> <ol> <li>Grant minimal permissions: Only grant permissions that an agent absolutely needs</li> <li>Restrict file access: Use <code>allowed_extensions</code> and <code>max_size</code> to limit file operations</li> <li>Monitor tool usage: Keep track of how agents use tools, especially for production deployments</li> <li>Review agent outputs: Always review agent-generated content before executing critical operations</li> <li>Use sandboxing: For sensitive environments, consider additional sandboxing mechanisms</li> </ol>"},{"location":"user-guides/agent_tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guides/agent_tools/#agent-cannot-access-tools","title":"Agent Cannot Access Tools","text":"<p>If your agent cannot access tools, check:</p> <ol> <li>That the tools are correctly specified in the Sentinelfile</li> <li>That the required permissions have been granted</li> <li>That the agent has been restarted after permission changes</li> </ol>"},{"location":"user-guides/agent_tools/#tool-execution-fails","title":"Tool Execution Fails","text":"<p>If a tool execution fails:</p> <ol> <li>Check the error message for specific issues</li> <li>Verify parameter formats and values</li> <li>Ensure any resource the tool needs to access exists and is accessible</li> <li>Confirm that network connectivity is available for network-based tools</li> </ol>"},{"location":"user-guides/agent_tools/#best-practices","title":"Best Practices","text":"<ol> <li>Design purpose-specific agents: Create agents with specific purposes and grant only the tools they need</li> <li>Structure tool parameters carefully: Provide clear and specific parameters to tools</li> <li>Validate agent outputs: Especially for file writing or other persistent actions</li> <li>Use tool settings to restrict scope: Limit search results, file sizes, and allowed operations</li> <li>Combine tools effectively: Design agents that combine multiple tools for complex workflows </li> </ol>"},{"location":"user-guides/llm_providers/","title":"LLM Provider Configuration","text":"<p>SentinelStacks supports multiple LLM (Large Language Model) providers for building and running agents. This guide explains how to configure different providers.</p>"},{"location":"user-guides/llm_providers/#supported-providers","title":"Supported Providers","text":"<p>Currently, SentinelStacks supports the following LLM providers:</p> <ol> <li>Claude - Anthropic's Claude models</li> <li>Ollama - Self-hosted models through Ollama, including Llama and other open-source models</li> <li>OpenAI - Support planned but not yet implemented</li> </ol>"},{"location":"user-guides/llm_providers/#configuration","title":"Configuration","text":"<p>You can configure LLM providers through the CLI configuration:</p> <pre><code># Set the default provider\nsentinel config set llm.provider [provider_name]\n\n# Set the API key (if required)\nsentinel config set llm.api_key [your_api_key]\n\n# Set a custom endpoint (for self-hosted models)\nsentinel config set [provider_name].endpoint [endpoint_url]\n\n# Set the default model\nsentinel config set llm.model [model_name]\n</code></pre> <p>You can also override these settings on a per-command basis:</p> <pre><code>sentinel build -t my-image --llm ollama --llm-endpoint https://example.com --llm-model llama3\n</code></pre>"},{"location":"user-guides/llm_providers/#provider-specific-configuration","title":"Provider-Specific Configuration","text":""},{"location":"user-guides/llm_providers/#claude","title":"Claude","text":"<p>Claude requires an API key from Anthropic.</p> <pre><code># Set Claude as the default provider\nsentinel config set llm.provider claude\n\n# Set your Claude API key\nsentinel config set llm.api_key your_api_key_here\n\n# Set the default Claude model\nsentinel config set llm.model claude-3.7-sonnet\n</code></pre>"},{"location":"user-guides/llm_providers/#ollama","title":"Ollama","text":"<p>Ollama can be used with a local installation or a remote endpoint.</p> <pre><code># Set Ollama as the default provider\nsentinel config set llm.provider ollama\n\n# For local Ollama installation (default)\n# No additional configuration needed\n\n# For remote Ollama endpoint\nsentinel config set ollama.endpoint https://your-ollama-endpoint.com\n\n# Set the model to use\nsentinel config set llm.model llama3\n</code></pre>"},{"location":"user-guides/llm_providers/#available-ollama-models","title":"Available Ollama Models","text":"<p>The models available depend on your Ollama installation. Common models include:</p> <ul> <li><code>llama3</code></li> <li><code>llama3:8b</code></li> <li><code>llama3:70b</code> </li> <li><code>mistral</code></li> <li><code>mixtral</code></li> <li><code>gemma</code></li> </ul> <p>Check your Ollama installation for a complete list of available models.</p>"},{"location":"user-guides/llm_providers/#using-different-providers-for-different-commands","title":"Using Different Providers for Different Commands","text":"<p>You can use different providers for different stages in your workflow:</p> <pre><code># Build using Claude for parsing\nsentinel build -t my-agent:v1 --llm claude\n\n# Run using Ollama for execution\nsentinel run my-agent:v1 --llm ollama --llm-model llama3\n</code></pre>"},{"location":"user-guides/llm_providers/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to set LLM configurations:</p> <ul> <li><code>SENTINEL_LLM_PROVIDER</code> - The LLM provider to use</li> <li><code>SENTINEL_LLM_ENDPOINT</code> - Custom endpoint for the LLM provider</li> <li><code>SENTINEL_LLM_MODEL</code> - The model to use</li> <li><code>SENTINEL_API_KEY</code> - API key for the LLM provider</li> </ul> <p>Example:</p> <pre><code>export SENTINEL_LLM_PROVIDER=ollama\nexport SENTINEL_LLM_ENDPOINT=https://model.gonella.co.uk\nexport SENTINEL_LLM_MODEL=llama3\nsentinel build -t my-agent:v1\n</code></pre>"},{"location":"user-guides/memory_management/","title":"Memory Management","text":"<p>SentinelStacks provides a flexible memory management system that enables agents to store, retrieve, and search through information. This guide explains how the memory system works and how to use it effectively.</p>"},{"location":"user-guides/memory_management/#overview","title":"Overview","text":"<p>The memory system in SentinelStacks serves several critical purposes:</p> <ul> <li>State Persistence: Allows agents to maintain state across sessions</li> <li>Knowledge Storage: Provides a way to store and retrieve structured information</li> <li>Semantic Search: Enables finding relevant information using vector embeddings</li> <li>Multi-Agent Sharing: Facilitates knowledge sharing between agents in a stack</li> </ul>"},{"location":"user-guides/memory_management/#memory-store-types","title":"Memory Store Types","text":"<p>SentinelStacks supports several types of memory stores:</p>"},{"location":"user-guides/memory_management/#key-value-stores","title":"Key-Value Stores","text":"Store Type Persistence Description <code>local</code> In-memory Fast, non-persistent storage that exists only during runtime <code>sqlite</code> File-based Persistent storage using SQLite database files"},{"location":"user-guides/memory_management/#vector-stores","title":"Vector Stores","text":"Store Type Persistence Description <code>local</code> In-memory Simple vector storage for development and testing <code>sqlite</code> File-based Persistent vector storage using SQLite and vector extensions <code>chroma</code> External Integration with the Chroma vector database for advanced retrieval"},{"location":"user-guides/memory_management/#using-memory-in-sentinelfiles","title":"Using Memory in Sentinelfiles","text":"<p>To configure memory for an agent, add memory settings to your Sentinelfile:</p> <pre><code>name: ResearchAssistant\ndescription: An agent that remembers research topics\nbaseModel: claude-3-sonnet-20240229\n\nmemory:\n  type: sqlite\n  path: ./data/research_agent\n  retention: 30d\n  vectorStore: chroma\n\n  settings:\n    maxSize: 1048576\n    embedModel: text-embedding-3-small\n</code></pre>"},{"location":"user-guides/memory_management/#memory-configuration-options","title":"Memory Configuration Options","text":"Option Description Default <code>type</code> Memory store type (<code>local</code>, <code>sqlite</code>) <code>local</code> <code>path</code> Storage location for persistent stores <code>./data/memory</code> <code>retention</code> How long to retain memory entries <code>7d</code> <code>vectorStore</code> Vector store type (<code>local</code>, <code>sqlite</code>, <code>chroma</code>) <code>local</code> <code>settings.maxSize</code> Maximum size of stored values in bytes <code>1048576</code> (1MB) <code>settings.embedModel</code> Model to use for generating embeddings <code>text-embedding-3-small</code>"},{"location":"user-guides/memory_management/#memory-management-using-api","title":"Memory Management Using API","text":"<p>For programmatic access, SentinelStacks provides a Memory service through its API:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/sentinelstacks/sentinel/pkg/api\"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    // Initialize API\n    sentinelAPI, err := api.NewAPI(api.Config{\n        MemoryConfig: api.MemoryServiceConfig{\n            StoragePath: \"./data/memory\",\n        },\n    })\n    if err != nil {\n        panic(err)\n    }\n    defer sentinelAPI.Close()\n\n    // Get memory service\n    memoryService := sentinelAPI.Memory()\n\n    // Store a value\n    err = memoryService.StoreValue(ctx, \"agent123\", \"last_search\", \"quantum computing\")\n    if err != nil {\n        panic(err)\n    }\n\n    // Retrieve a value\n    value, err := memoryService.RetrieveValue(ctx, \"agent123\", \"last_search\")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"Last search:\", value)\n}\n</code></pre>"},{"location":"user-guides/memory_management/#cli-commands-for-memory","title":"CLI Commands for Memory","text":"<p>SentinelStacks includes several CLI commands for working with agent and stack memory:</p>"},{"location":"user-guides/memory_management/#viewing-agent-memory","title":"Viewing Agent Memory","text":"<pre><code># View an agent's memory state\nsentinel agent memory research-agent\n\n# Export an agent's memory to a file\nsentinel agent memory research-agent --export memory.json\n\n# View specific memory keys\nsentinel agent memory research-agent --keys last_search,user_preferences\n</code></pre>"},{"location":"user-guides/memory_management/#managing-memory","title":"Managing Memory","text":"<pre><code># Clear an agent's memory\nsentinel agent memory research-agent --clear\n\n# Import memory from a file\nsentinel agent memory research-agent --import memory.json\n\n# Set retention period for an agent's memory\nsentinel agent memory research-agent --retention 90d\n</code></pre>"},{"location":"user-guides/memory_management/#working-with-vector-memory","title":"Working with Vector Memory","text":"<pre><code># Search agent's vector memory\nsentinel agent vectorsearch research-agent \"quantum computing\"\n\n# Add documents to vector memory\nsentinel agent vectoradd research-agent --file research_paper.txt\n\n# List vector memory entries\nsentinel agent vectorlist research-agent\n</code></pre>"},{"location":"user-guides/memory_management/#shell-integration","title":"Shell Integration","text":"<p>When using the interactive shell with an agent, you can access memory commands:</p> <pre><code># Start a shell session with an agent\nsentinel shell research-agent\n\n# In the shell:\n&gt; memory                  # Display all memory entries\n&gt; memory last_search      # Display a specific memory entry\n&gt; memory clear            # Clear all memory\n&gt; memory set key value    # Set a memory value\n</code></pre>"},{"location":"user-guides/memory_management/#memory-persistence","title":"Memory Persistence","text":"<p>Memory persistence depends on the configured store type:</p> <ol> <li>Local Store: Memory exists only during runtime and is lost when the agent stops</li> <li>SQLite Store: Memory is persisted to disk in SQLite database files</li> <li>Chroma Store: Vector embeddings are stored in a Chroma database</li> </ol> <p>For persistent stores, data is saved in the location specified by the <code>path</code> configuration or in the default location (<code>./data/memory</code>).</p>"},{"location":"user-guides/memory_management/#vector-search","title":"Vector Search","text":"<p>The vector memory system enables semantic search capabilities:</p> <pre><code>// Store a document with automatic embedding\nerr := memoryService.StoreDocument(ctx, \"agent123\", \"doc1\", \"Quantum computing uses qubits instead of classical bits\", nil)\n\n// Search for semantically similar content\nresults, err := memoryService.SearchSimilar(ctx, \"agent123\", \"How do quantum computers differ from regular computers?\", 3)\n</code></pre> <p>The vector search system supports:</p> <ul> <li>Semantic Matching: Find relevant information based on meaning, not just keywords</li> <li>Metadata Filtering: Filter search results by metadata attributes</li> <li>Document Chunking: Automatically split large documents into searchable chunks</li> </ul>"},{"location":"user-guides/memory_management/#stack-memory-sharing","title":"Stack Memory Sharing","text":"<p>Agents within a stack can share memory through the stack memory system:</p> <pre><code># In Stackfile.yaml\nagents:\n  - name: researcher\n    # ... other configuration ...\n    memory:\n      type: sqlite\n      shared: [\"research_results\"]\n\n  - name: writer\n    # ... other configuration ...\n    memory:\n      type: sqlite \n      access: [\"research_results\"]\n</code></pre> <p>The <code>shared</code> attribute specifies memory keys that other agents can access, while the <code>access</code> attribute defines which shared keys this agent can read from.</p>"},{"location":"user-guides/memory_management/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guides/memory_management/#memory-backends","title":"Memory Backends","text":"<p>You can configure different memory backends for different types of data:</p> <pre><code>memory:\n  keyValue:\n    type: sqlite\n    path: ./data/agent_kv\n\n  vector:\n    type: chroma\n    endpoint: http://localhost:8000\n    collection: agent_vectors\n</code></pre>"},{"location":"user-guides/memory_management/#memory-plugins","title":"Memory Plugins","text":"<p>SentinelStacks supports custom memory plugins for specialized storage needs:</p> <pre><code>memory:\n  type: custom\n  plugin: redis-store\n  settings:\n    host: localhost\n    port: 6379\n    password: secret\n</code></pre> <p>To implement a custom memory plugin, see the Developer Guide.</p>"},{"location":"user-guides/memory_management/#best-practices","title":"Best Practices","text":"<ol> <li>Choose the Right Store Type: </li> <li>For development/testing, use <code>local</code> memory</li> <li> <p>For production, use <code>sqlite</code> or <code>chroma</code> for persistence</p> </li> <li> <p>Manage Memory Growth: </p> </li> <li>Set appropriate retention periods</li> <li>Use <code>maxSize</code> to limit individual entry sizes</li> <li> <p>Periodically clean up obsolete data</p> </li> <li> <p>Optimize Vector Search:</p> </li> <li>Use specific, focused queries</li> <li>Include relevant metadata for filtering</li> <li> <p>Choose appropriate vector models for your content</p> </li> <li> <p>Security Considerations:</p> </li> <li>Avoid storing sensitive information in memory</li> <li>Use encryption for sensitive data if necessary</li> <li> <p>Implement access controls for shared memory</p> </li> <li> <p>Performance Optimization:</p> </li> <li>Use the appropriate store type for your scale</li> <li>Consider external vector databases for large collections</li> <li>Implement caching for frequently accessed data </li> </ol>"},{"location":"user-guides/quick_start/","title":"SentinelStacks Quick Start Guide","text":"<p>This guide will help you get started with SentinelStacks by walking through the installation and basic usage to create, build, run, and share your first AI agent.</p>"},{"location":"user-guides/quick_start/#installation","title":"Installation","text":""},{"location":"user-guides/quick_start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.20 or later</li> <li>Git</li> <li>Access to an LLM API (Claude, OpenAI, etc.)</li> </ul>"},{"location":"user-guides/quick_start/#installing-sentinelstacks-cli","title":"Installing SentinelStacks CLI","text":"<pre><code># Install the Sentinel CLI\ngo install github.com/sentinelstacks/cli@latest\n\n# Verify installation\nsentinel version\n</code></pre>"},{"location":"user-guides/quick_start/#configuration","title":"Configuration","text":"<p>Set up your LLM API access:</p> <pre><code># Configure your default LLM provider\nsentinel config set llm.provider claude\n\n# Add your API key\nsentinel config set llm.api_key your_api_key_here\n</code></pre>"},{"location":"user-guides/quick_start/#creating-your-first-agent","title":"Creating Your First Agent","text":""},{"location":"user-guides/quick_start/#step-1-initialize-a-new-agent","title":"Step 1: Initialize a New Agent","text":"<pre><code># Create a new directory for your agent\nmkdir my-first-agent\ncd my-first-agent\n\n# Initialize a new Sentinelfile\nsentinel init\n</code></pre> <p>This will create a basic Sentinelfile template in your current directory.</p>"},{"location":"user-guides/quick_start/#step-2-edit-the-sentinelfile","title":"Step 2: Edit the Sentinelfile","text":"<p>Open the Sentinelfile in your favorite text editor and describe your agent in natural language:</p> <pre><code># Sentinelfile for WeatherAssistant\n\nCreate an agent that provides weather forecasts and recommendations.\n\nThe agent should be able to:\n- Check current weather conditions for a location\n- Provide 5-day forecasts\n- Suggest clothing based on weather conditions\n- Alert about severe weather events\n\nThe agent should use claude-3.7-sonnet as its base model.\n\nIt should maintain state about the user's location preferences and recent queries.\n\nWhen the conversation starts, the agent should introduce itself as a weather assistant and ask for the user's location if not already known.\n\nAllow the agent to access the following tools:\n- Weather API\n- Geolocation service\n\nSet default_unit to metric.\nSet refresh_interval to 30 minutes.\n</code></pre>"},{"location":"user-guides/quick_start/#step-3-build-your-agent","title":"Step 3: Build Your Agent","text":"<pre><code># Build the agent image\nsentinel build -t username/weather-assistant:latest\n\n# Verify the build\nsentinel images\n</code></pre> <p>This will parse your natural language Sentinelfile into a structured definition and create a Sentinel Image.</p>"},{"location":"user-guides/quick_start/#step-4-run-your-agent","title":"Step 4: Run Your Agent","text":"<pre><code># Run your agent\nsentinel run username/weather-assistant:latest\n\n# Or run with custom parameters\nsentinel run --env refresh_interval=15 username/weather-assistant:latest\n</code></pre> <p>This will start your agent in interactive mode where you can chat with it directly.</p>"},{"location":"user-guides/quick_start/#step-5-push-to-registry","title":"Step 5: Push to Registry","text":"<p>Share your agent with others by pushing it to the Sentinel Registry:</p> <pre><code># Log in to the registry\nsentinel login\n\n# Push your agent\nsentinel push username/weather-assistant:latest\n</code></pre>"},{"location":"user-guides/quick_start/#using-sentinel-desktop","title":"Using Sentinel Desktop","text":"<p>For a graphical interface to manage your agents:</p> <ol> <li>Download Sentinel Desktop from the official website</li> <li>Install and launch the application</li> <li>Log in with your Sentinel Registry credentials</li> <li>Access your agents from the \"My Agents\" section</li> <li>Build, run, and monitor agents using the GUI</li> </ol>"},{"location":"user-guides/quick_start/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Examples: Check out the examples directory for more agent templates</li> <li>Connect Tools: Learn how to connect external tools to your agents</li> <li>Create Agent Networks: Discover how to orchestrate multiple agents to work together</li> <li>Customize Runtime: Explore advanced runtime configurations for your agents</li> </ul>"},{"location":"user-guides/quick_start/#common-commands","title":"Common Commands","text":"<pre><code># List running agents\nsentinel ps\n\n# Stop a running agent\nsentinel stop agent_id\n\n# View agent logs\nsentinel logs agent_id\n\n# Inspect an agent image\nsentinel inspect username/weather-assistant:latest\n\n# List available templates\nsentinel templates list\n\n# Create from template\nsentinel init --template customer-support\n</code></pre>"},{"location":"user-guides/quick_start/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check the logs: <code>sentinel logs agent_id</code></li> <li>Verify your API key: <code>sentinel config check llm.api_key</code></li> <li>Update to the latest version: <code>go install github.com/sentinelstacks/cli@latest</code></li> <li>Seek help: <code>sentinel support</code></li> </ol> <p>For more detailed information, visit the SentinelStacks documentation.</p>"},{"location":"user-guides/registry_guide/","title":"Registry Management","text":"<p>This guide covers everything you need to know about the SentinelStacks registry system, which allows you to share agents and stacks across machines and with other users.</p>"},{"location":"user-guides/registry_guide/#overview","title":"Overview","text":"<p>The SentinelStacks registry is a central repository for storing, sharing, and discovering agent and stack packages. Similar to Docker Hub or npm, it provides:</p> <ul> <li>Version management for agents and stacks</li> <li>Searchable catalogs of available packages</li> <li>Authentication and access controls</li> <li>Cryptographic verification of package integrity</li> </ul>"},{"location":"user-guides/registry_guide/#registry-concepts","title":"Registry Concepts","text":""},{"location":"user-guides/registry_guide/#package-types","title":"Package Types","text":"<p>The registry supports two primary package types:</p> <ol> <li>Agent Packages (<code>.agent.sntl</code>): Contain a single agent with its configuration and dependencies</li> <li>Stack Packages (<code>.stack.sntl</code>): Contain a multi-agent system definition and orchestration rules</li> </ol>"},{"location":"user-guides/registry_guide/#custom-file-formats","title":"Custom File Formats","text":"<p>SentinelStacks uses custom file formats with specific extensions:</p> Extension Description MIME Type <code>.agent.sntl</code> Agent package <code>application/x-sentinel-agent</code> <code>.stack.sntl</code> Stack package <code>application/x-sentinel-stack</code> <code>.agent.yaml</code> Agent definition <code>application/x-sentinel-agent-def+yaml</code> <code>.stack.yaml</code> Stack definition <code>application/x-sentinel-stack-def+yaml</code> <code>.sig.sntl</code> Detached signature <code>application/x-sentinel-signature</code>"},{"location":"user-guides/registry_guide/#package-format","title":"Package Format","text":"<p>The <code>.sntl</code> package format has several key characteristics:</p> <ol> <li>Magic Headers: Each package starts with a magic header identifying its type:</li> <li>Agent packages: <code>SNTL-AGENT-PKG</code></li> <li> <p>Stack packages: <code>SNTL-STACK-PKG</code></p> </li> <li> <p>Version Field: A 4-byte version field that identifies the package format version</p> </li> <li> <p>Compressed Archive: The remainder of the file is a gzipped tar archive containing:</p> </li> <li><code>sentinel.manifest.json</code>: Package metadata and file inventory</li> <li>The main definition file (<code>.agent.yaml</code> or <code>.stack.yaml</code>)</li> <li>Documentation and example files</li> <li> <p>Other supporting resources</p> </li> <li> <p>Signature Block: Optional cryptographic signatures for verification</p> </li> </ol>"},{"location":"user-guides/registry_guide/#authentication","title":"Authentication","text":"<p>Before you can push packages to the registry, you need to authenticate. The registry supports:</p> <ol> <li> <p>Username/Password Authentication:    <pre><code>sentinel login --username myuser --password mypassword\n</code></pre></p> </li> <li> <p>Token Authentication:    <pre><code>sentinel login --token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre></p> </li> </ol> <p>If you don't provide credentials via flags, the command will interactively prompt you for them.</p>"},{"location":"user-guides/registry_guide/#configuration","title":"Configuration","text":"<p>The registry connection can be configured in your SentinelStacks config file, typically located at <code>~/.sentinel/config.yaml</code>:</p> <pre><code>registry:\n  default: registry.example.com\n  auth:\n    registry_example_com:\n      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n      username: myuser\n</code></pre>"},{"location":"user-guides/registry_guide/#registry-commands","title":"Registry Commands","text":""},{"location":"user-guides/registry_guide/#login-and-authentication","title":"Login and Authentication","text":"<pre><code># Log in to the default registry\nsentinel login\n\n# Log in to a specific registry\nsentinel login registry.mycompany.com\n\n# Log in with a username (password will be prompted)\nsentinel login --username myuser\n\n# Log out from the default registry\nsentinel logout\n\n# Log out from all registries\nsentinel logout --all\n</code></pre>"},{"location":"user-guides/registry_guide/#pushing-and-pulling-agents","title":"Pushing and Pulling Agents","text":"<pre><code># Push an agent with the latest tag\nsentinel push myname/research-agent\n\n# Push a specific version\nsentinel push myname/research-agent:v1.2\n\n# Push to a specific registry\nsentinel push --registry registry.mycompany.com myname/research-agent\n\n# Make an agent publicly accessible\nsentinel push --public myname/research-agent:latest\n\n# Pull an agent\nsentinel pull myname/research-agent:v1.2\n\n# Pull from a specific registry\nsentinel pull --registry registry.mycompany.com myname/research-agent\n</code></pre>"},{"location":"user-guides/registry_guide/#working-with-stacks","title":"Working with Stacks","text":"<pre><code># Push a stack to the registry\nsentinel stack push Stackfile.yaml --sign\n\n# Pull a stack from the registry\nsentinel stack pull username/text-analyzer:latest --extract-agents\n\n# Search for stacks\nsentinel stack search text-analyzer\n\n# List available versions of a stack\nsentinel stack versions text-analyzer\n</code></pre>"},{"location":"user-guides/registry_guide/#package-naming","title":"Package Naming","text":"<p>Agent and stack packages follow a similar naming convention to Docker images:</p> <pre><code>[registry/][namespace/]name[:tag]\n</code></pre> <p>Where: - <code>registry</code> is the optional registry hostname - <code>namespace</code> is the optional user or organization namespace - <code>name</code> is the required package name - <code>tag</code> is the optional tag (defaults to <code>latest</code>)</p>"},{"location":"user-guides/registry_guide/#security-features","title":"Security Features","text":""},{"location":"user-guides/registry_guide/#package-signing","title":"Package Signing","text":"<p>You can cryptographically sign packages when pushing them to the registry:</p> <pre><code># Sign a package while pushing\nsentinel push --sign myname/research-agent:v1.2\n\n# Verify a package signature\nsentinel verify myname/research-agent:v1.2\n</code></pre>"},{"location":"user-guides/registry_guide/#access-controls","title":"Access Controls","text":"<p>The registry supports different access levels:</p> <ul> <li>Read-only: Can download public packages</li> <li>Publisher: Can upload packages under their own namespace</li> <li>Admin: Has full management access</li> </ul>"},{"location":"user-guides/registry_guide/#registry-api","title":"Registry API","text":"<p>The registry provides a REST API for programmatic integration:</p> <ul> <li><code>GET /v1/packages/search</code> - Search for packages</li> <li><code>GET /v1/packages/{name}/{version}</code> - Download a package</li> <li><code>PUT /v1/packages/publish</code> - Upload a new package</li> <li><code>GET /v1/packages/{name}/versions</code> - List available versions</li> <li><code>DELETE /v1/packages/{name}/{version}</code> - Remove a package</li> <li><code>GET /v1/packages/{name}/{version}/info</code> - Get package metadata</li> </ul>"},{"location":"user-guides/registry_guide/#example-workflow","title":"Example Workflow","text":"<p>Here's a typical workflow for sharing agent stacks through the registry:</p> <ol> <li>Create a stack locally with <code>sentinel stack init</code></li> <li>Test it to ensure it works as expected with <code>sentinel stack run</code></li> <li>Package it with <code>sentinel stack push --build</code> to create a <code>.stack.sntl</code> file</li> <li>Sign it during packaging with <code>--sign</code> to add a cryptographic signature</li> <li>Push it to the registry with <code>sentinel stack push</code></li> <li>Share the reference with colleagues</li> <li>Pull it on another machine with <code>sentinel stack pull</code></li> </ol>"},{"location":"user-guides/registry_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guides/registry_guide/#connection-issues","title":"Connection Issues","text":"<p>If you have trouble connecting to the registry:</p> <ol> <li>Check your internet connection</li> <li>Verify the registry URL is correct</li> <li>Ensure your authentication token is valid</li> <li>Check if the registry service is running</li> </ol>"},{"location":"user-guides/registry_guide/#authentication-problems","title":"Authentication Problems","text":"<p>If you can't authenticate:</p> <ol> <li>Try logging in again with <code>sentinel login</code></li> <li>Check if your account has the necessary permissions</li> <li>Verify your API key hasn't expired</li> </ol>"},{"location":"user-guides/registry_guide/#package-issues","title":"Package Issues","text":"<p>If you can't push or pull packages:</p> <ol> <li>Ensure the package exists</li> <li>Check your namespace permissions</li> <li>Verify the signature if required</li> <li>Make sure you're using the correct package name and version </li> </ol>"},{"location":"visualizations/","title":"SentinelStacks Visualizations","text":"<p>This directory contains Mermaid diagrams for visualizing the SentinelStacks architecture and roadmap. </p>"},{"location":"visualizations/#available-diagrams","title":"Available Diagrams","text":"<ol> <li>Phase Roadmap (<code>phase-roadmap.mmd</code>) - A Gantt chart showing the development timeline and key milestones</li> <li>Enhanced Architecture (<code>enhanced-architecture.mmd</code>) - A flowchart showing the overall system architecture with planned enhancements</li> <li>Stack Engine Detail (<code>stack-engine-detail.mmd</code>) - A class diagram detailing the internal structure of the Stack Engine component</li> </ol>"},{"location":"visualizations/#rendering-the-diagrams","title":"Rendering the Diagrams","text":"<p>These diagrams are written in Mermaid markdown syntax and can be rendered in multiple ways:</p>"},{"location":"visualizations/#using-the-mermaid-cli","title":"Using the Mermaid CLI","text":"<pre><code>npx @mermaid-js/mermaid-cli -i phase-roadmap.mmd -o phase-roadmap.png\n</code></pre>"},{"location":"visualizations/#using-a-mermaid-compatible-markdown-renderer","title":"Using a Mermaid-compatible Markdown Renderer","text":"<p>Many documentation systems support Mermaid natively, including: - GitHub Markdown - GitLab Markdown - MkDocs with the mermaid plugin - Docusaurus</p>"},{"location":"visualizations/#using-the-mermaid-live-editor","title":"Using the Mermaid Live Editor","text":"<p>You can copy the content of any <code>.mmd</code> file into the Mermaid Live Editor to visualize and export the diagrams.</p>"},{"location":"visualizations/#updating-diagrams","title":"Updating Diagrams","text":"<p>When making significant architectural changes, please update these diagrams to reflect the current design. The diagrams should be kept in sync with the implementation.</p> <p>For more information about Mermaid syntax, see the Mermaid documentation.</p>"}]}